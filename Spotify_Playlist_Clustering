{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Introduction\n",
        "This notebook demonstrates the process of creating cohesive music playlists using clustering techniques and Spotify audio features. The goal is to analyze a dataset of 5000 songs, group them based on audio characteristics, and generate playlists that align with human-perceived song similarities.\n",
        "\n",
        "Key steps include:\n",
        "\n",
        "1. Data Preprocessing: Cleaning and transforming audio features for better clustering performance.\n",
        "2. Dimensionality Reduction: Using Principal Component Analysis (PCA) to simplify the dataset while retaining its most important variance.\n",
        "3. Clustering: Applying K-Means clustering to group songs into playlists based on shared audio characteristics.\n",
        "4. Evaluation: Assessing cluster quality using the Elbow Method and Silhouette Score to determine the optimal number of clusters.\n",
        "5. Prototype Development: Generating example playlists to evaluate whether the clustering effectively organizes songs with similar traits."
      ],
      "metadata": {
        "id": "ej2w5pkGFnWD"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SrXe25mMUhT0"
      },
      "source": [
        "---\n",
        "## 1.&nbsp; Import libraries and files 💾"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "id": "UCKxl5ItKO1m"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics import pairwise_distances\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler, QuantileTransformer, PowerTransformer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "yM3CHw06GXIf"
      },
      "outputs": [],
      "source": [
        "#download cvs with 5000 songs\n",
        "url = \"https://drive.google.com/file/d/18mVZEuWzlFfRpwbdtv7HAeqp0IqK-Qzq/view?usp=sharing\"\n",
        "path = \"https://drive.google.com/uc?export=download&id=\"+url.split(\"/\")[-2]\n",
        "music_df= pd.read_csv(path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ML4dcot90s1v"
      },
      "source": [
        "# 2. Clean data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "collapsed": true,
        "id": "BMTU7VGb0vq2",
        "outputId": "1406ecbc-b7b0-40ee-ebb6-8a91845b9315"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0                         name                artist  \\\n",
              "0           0  Se Eu Quiser Falar Com Deus          Gilberto Gil   \n",
              "1           1             Saudade De Bahia  Antônio Carlos Jobim   \n",
              "2           2     Canta Canta, Minha Gente      Martinho Da Vila   \n",
              "\n",
              "   danceability  energy  key  loudness  mode  speechiness  acousticness  \\\n",
              "0         0.658   0.259   11   -13.141     0       0.0705         0.694   \n",
              "1         0.742   0.399    2   -12.646     1       0.0346         0.217   \n",
              "2         0.851   0.730    2   -11.048     1       0.3470         0.453   \n",
              "\n",
              "   instrumentalness  liveness  valence    tempo type  duration_ms  \\\n",
              "0          0.000059     0.975    0.306  110.376            256213   \n",
              "1          0.000002     0.107    0.693  125.039            191867   \n",
              "2          0.000063     0.124    0.905   93.698            152267   \n",
              "\n",
              "   time_signature                      id  \\\n",
              "0               4  1n7JnwviZ7zf0LR1tcGFq7   \n",
              "1               4  5QGM1U0eCYrQuwSJwTm5Zq   \n",
              "2               4  0NLIFSZxPzQhCwnkn5PJYs   \n",
              "\n",
              "                                                html  \n",
              "0  https://open.spotify.com/track/1n7JnwviZ7zf0LR...  \n",
              "1  https://open.spotify.com/track/5QGM1U0eCYrQuwS...  \n",
              "2  https://open.spotify.com/track/0NLIFSZxPzQhCwn...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fce4a16-e9da-4f14-9986-6325871551d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>name</th>\n",
              "      <th>artist</th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "      <th>type</th>\n",
              "      <th>duration_ms</th>\n",
              "      <th>time_signature</th>\n",
              "      <th>id</th>\n",
              "      <th>html</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Se Eu Quiser Falar Com Deus</td>\n",
              "      <td>Gilberto Gil</td>\n",
              "      <td>0.658</td>\n",
              "      <td>0.259</td>\n",
              "      <td>11</td>\n",
              "      <td>-13.141</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0705</td>\n",
              "      <td>0.694</td>\n",
              "      <td>0.000059</td>\n",
              "      <td>0.975</td>\n",
              "      <td>0.306</td>\n",
              "      <td>110.376</td>\n",
              "      <td></td>\n",
              "      <td>256213</td>\n",
              "      <td>4</td>\n",
              "      <td>1n7JnwviZ7zf0LR1tcGFq7</td>\n",
              "      <td>https://open.spotify.com/track/1n7JnwviZ7zf0LR...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Saudade De Bahia</td>\n",
              "      <td>Antônio Carlos Jobim</td>\n",
              "      <td>0.742</td>\n",
              "      <td>0.399</td>\n",
              "      <td>2</td>\n",
              "      <td>-12.646</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0346</td>\n",
              "      <td>0.217</td>\n",
              "      <td>0.000002</td>\n",
              "      <td>0.107</td>\n",
              "      <td>0.693</td>\n",
              "      <td>125.039</td>\n",
              "      <td></td>\n",
              "      <td>191867</td>\n",
              "      <td>4</td>\n",
              "      <td>5QGM1U0eCYrQuwSJwTm5Zq</td>\n",
              "      <td>https://open.spotify.com/track/5QGM1U0eCYrQuwS...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Canta Canta, Minha Gente</td>\n",
              "      <td>Martinho Da Vila</td>\n",
              "      <td>0.851</td>\n",
              "      <td>0.730</td>\n",
              "      <td>2</td>\n",
              "      <td>-11.048</td>\n",
              "      <td>1</td>\n",
              "      <td>0.3470</td>\n",
              "      <td>0.453</td>\n",
              "      <td>0.000063</td>\n",
              "      <td>0.124</td>\n",
              "      <td>0.905</td>\n",
              "      <td>93.698</td>\n",
              "      <td></td>\n",
              "      <td>152267</td>\n",
              "      <td>4</td>\n",
              "      <td>0NLIFSZxPzQhCwnkn5PJYs</td>\n",
              "      <td>https://open.spotify.com/track/0NLIFSZxPzQhCwn...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fce4a16-e9da-4f14-9986-6325871551d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fce4a16-e9da-4f14-9986-6325871551d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fce4a16-e9da-4f14-9986-6325871551d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b1a7aea8-668d-4627-8bc0-ada39605fb03\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b1a7aea8-668d-4627-8bc0-ada39605fb03')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b1a7aea8-668d-4627-8bc0-ada39605fb03 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "music_df",
              "summary": "{\n  \"name\": \"music_df\",\n  \"rows\": 5235,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1511,\n        \"min\": 0,\n        \"max\": 5234,\n        \"num_unique_values\": 5235,\n        \"samples\": [\n          3075,\n          1268,\n          422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5011,\n        \"samples\": [\n          \"I Can See Clearly Now\",\n          \"No Se Si Fue\",\n          \"Piano Quartet in G Minor, K.478: II. Andante\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"artist\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2176,\n        \"samples\": [\n          \"Chris Montez\",\n          \"Slipknot\",\n          \"Trey Songz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"danceability\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21804102237967374,\n        \"min\": 0.0,\n        \"max\": 0.967,\n        \"num_unique_values\": 882,\n        \"samples\": [\n          0.387,\n          0.487,\n          0.725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28833495434424555,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1191,\n        \"samples\": [\n          0.79,\n          0.789,\n          0.527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0,\n          5,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loudness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.294850141279967,\n        \"min\": -60.0,\n        \"max\": 1.342,\n        \"num_unique_values\": 4310,\n        \"samples\": [\n          -14.164,\n          -6.808,\n          -15.421\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"speechiness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07119318214920843,\n        \"min\": 0.0,\n        \"max\": 0.918,\n        \"num_unique_values\": 1001,\n        \"samples\": [\n          0.0636,\n          0.0679\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"acousticness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3559847230983787,\n        \"min\": 0.0,\n        \"max\": 0.996,\n        \"num_unique_values\": 2545,\n        \"samples\": [\n          0.206,\n          0.0873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"instrumentalness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3706862547649388,\n        \"min\": 0.0,\n        \"max\": 0.985,\n        \"num_unique_values\": 2168,\n        \"samples\": [\n          0.213,\n          4.3e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"liveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14940979724578315,\n        \"min\": 0.0,\n        \"max\": 0.987,\n        \"num_unique_values\": 1128,\n        \"samples\": [\n          0.445,\n          0.0636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2777251750403693,\n        \"min\": 0.0,\n        \"max\": 0.985,\n        \"num_unique_values\": 1267,\n        \"samples\": [\n          0.0234,\n          0.0958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tempo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.568463441414927,\n        \"min\": 0.0,\n        \"max\": 213.99,\n        \"num_unique_values\": 4824,\n        \"samples\": [\n          88.194,\n          149.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"type\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration_ms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135633,\n        \"min\": 32760,\n        \"max\": 3815787,\n        \"num_unique_values\": 4663,\n        \"samples\": [\n          234778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time_signature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5171,\n        \"samples\": [\n          \"34xZFT7artr3SGqgSoR88L\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"html\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5171,\n        \"samples\": [\n          \"https://open.spotify.com/track/34xZFT7artr3SGqgSoR88L\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "# Remove leading and trailing spaces from column names\n",
        "music_df.columns = music_df.columns.str.strip()\n",
        "\n",
        "# Remove leading and trailing spaces from all string entries in the DataFrame\n",
        "music_df = music_df.apply(lambda col: col.str.strip() if col.dtype == \"object\" else col)\n",
        "\n",
        "# Display the cleaned DataFrame\n",
        "music_df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "collapsed": true,
        "id": "LVucVOoP1Y9v"
      },
      "outputs": [],
      "source": [
        "#remove columns that are empty\n",
        "music_df= music_df.drop(columns=['Unnamed: 0', 'type']).copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "a4ZpGBga3j--"
      },
      "outputs": [],
      "source": [
        "#remove columns that are not needed for ML analysis\n",
        "parameters_only_df = music_df.drop(columns=['name', 'artist', 'time_signature', 'id', 'html', 'duration_ms']).copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "QLiOb3xT3bpn",
        "outputId": "643d7be8-cebb-4318-bdb4-d28da01d6839"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   danceability  energy  key  loudness  mode  speechiness  acousticness  \\\n",
              "0         0.658   0.259   11   -13.141     0       0.0705         0.694   \n",
              "1         0.742   0.399    2   -12.646     1       0.0346         0.217   \n",
              "2         0.851   0.730    2   -11.048     1       0.3470         0.453   \n",
              "\n",
              "   instrumentalness  liveness  valence    tempo  \n",
              "0          0.000059     0.975    0.306  110.376  \n",
              "1          0.000002     0.107    0.693  125.039  \n",
              "2          0.000063     0.124    0.905   93.698  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f794ef64-2cdb-4b9d-9eb1-27ee3461e4b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.658</td>\n",
              "      <td>0.259</td>\n",
              "      <td>11</td>\n",
              "      <td>-13.141</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0705</td>\n",
              "      <td>0.694</td>\n",
              "      <td>0.000059</td>\n",
              "      <td>0.975</td>\n",
              "      <td>0.306</td>\n",
              "      <td>110.376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.742</td>\n",
              "      <td>0.399</td>\n",
              "      <td>2</td>\n",
              "      <td>-12.646</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0346</td>\n",
              "      <td>0.217</td>\n",
              "      <td>0.000002</td>\n",
              "      <td>0.107</td>\n",
              "      <td>0.693</td>\n",
              "      <td>125.039</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.851</td>\n",
              "      <td>0.730</td>\n",
              "      <td>2</td>\n",
              "      <td>-11.048</td>\n",
              "      <td>1</td>\n",
              "      <td>0.3470</td>\n",
              "      <td>0.453</td>\n",
              "      <td>0.000063</td>\n",
              "      <td>0.124</td>\n",
              "      <td>0.905</td>\n",
              "      <td>93.698</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f794ef64-2cdb-4b9d-9eb1-27ee3461e4b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f794ef64-2cdb-4b9d-9eb1-27ee3461e4b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f794ef64-2cdb-4b9d-9eb1-27ee3461e4b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8244b965-5b2d-4fac-91b2-3176a1100b7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8244b965-5b2d-4fac-91b2-3176a1100b7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8244b965-5b2d-4fac-91b2-3176a1100b7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "parameters_only_df",
              "summary": "{\n  \"name\": \"parameters_only_df\",\n  \"rows\": 5235,\n  \"fields\": [\n    {\n      \"column\": \"danceability\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21804102237967374,\n        \"min\": 0.0,\n        \"max\": 0.967,\n        \"num_unique_values\": 882,\n        \"samples\": [\n          0.387,\n          0.487,\n          0.725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28833495434424555,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1191,\n        \"samples\": [\n          0.79,\n          0.789,\n          0.527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 11,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0,\n          5,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loudness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.294850141279967,\n        \"min\": -60.0,\n        \"max\": 1.342,\n        \"num_unique_values\": 4310,\n        \"samples\": [\n          -14.164,\n          -6.808,\n          -15.421\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"speechiness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07119318214920843,\n        \"min\": 0.0,\n        \"max\": 0.918,\n        \"num_unique_values\": 1001,\n        \"samples\": [\n          0.0636,\n          0.0679\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"acousticness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3559847230983787,\n        \"min\": 0.0,\n        \"max\": 0.996,\n        \"num_unique_values\": 2545,\n        \"samples\": [\n          0.206,\n          0.0873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"instrumentalness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3706862547649388,\n        \"min\": 0.0,\n        \"max\": 0.985,\n        \"num_unique_values\": 2168,\n        \"samples\": [\n          0.213,\n          4.3e-06\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"liveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14940979724578315,\n        \"min\": 0.0,\n        \"max\": 0.987,\n        \"num_unique_values\": 1128,\n        \"samples\": [\n          0.445,\n          0.0636\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2777251750403693,\n        \"min\": 0.0,\n        \"max\": 0.985,\n        \"num_unique_values\": 1267,\n        \"samples\": [\n          0.0234,\n          0.0958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tempo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.568463441414927,\n        \"min\": 0.0,\n        \"max\": 213.99,\n        \"num_unique_values\": 4824,\n        \"samples\": [\n          88.194,\n          149.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "parameters_only_df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "5tRi3Vha4e9G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8307e964-7efb-4c76-9c5f-1802f7a25273"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5235 entries, 0 to 5234\n",
            "Data columns (total 17 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   name              5235 non-null   object \n",
            " 1   artist            5235 non-null   object \n",
            " 2   danceability      5235 non-null   float64\n",
            " 3   energy            5235 non-null   float64\n",
            " 4   key               5235 non-null   int64  \n",
            " 5   loudness          5235 non-null   float64\n",
            " 6   mode              5235 non-null   int64  \n",
            " 7   speechiness       5235 non-null   float64\n",
            " 8   acousticness      5235 non-null   float64\n",
            " 9   instrumentalness  5235 non-null   float64\n",
            " 10  liveness          5235 non-null   float64\n",
            " 11  valence           5235 non-null   float64\n",
            " 12  tempo             5235 non-null   float64\n",
            " 13  duration_ms       5235 non-null   int64  \n",
            " 14  time_signature    5235 non-null   int64  \n",
            " 15  id                5235 non-null   object \n",
            " 16  html              5235 non-null   object \n",
            "dtypes: float64(9), int64(4), object(4)\n",
            "memory usage: 695.4+ KB\n",
            "None\n",
            "       danceability       energy          key     loudness         mode  \\\n",
            "count   5235.000000  5235.000000  5235.000000  5235.000000  5235.000000   \n",
            "mean       0.509503     0.653565     5.254441    -9.338098     0.646227   \n",
            "std        0.218041     0.288335     3.571559     6.294850     0.478185   \n",
            "min        0.000000     0.000000     0.000000   -60.000000     0.000000   \n",
            "25%        0.309000     0.479000     2.000000   -11.337000     0.000000   \n",
            "50%        0.539000     0.738000     5.000000    -7.338000     1.000000   \n",
            "75%        0.688000     0.893000     8.000000    -5.264000     1.000000   \n",
            "max        0.967000     1.000000    11.000000     1.342000     1.000000   \n",
            "\n",
            "       speechiness  acousticness  instrumentalness     liveness      valence  \\\n",
            "count  5235.000000   5235.000000       5235.000000  5235.000000  5235.000000   \n",
            "mean      0.083178      0.290043          0.257337     0.185354     0.443596   \n",
            "std       0.071193      0.355985          0.370686     0.149410     0.277725   \n",
            "min       0.000000      0.000000          0.000000     0.000000     0.000000   \n",
            "25%       0.039000      0.002450          0.000001     0.092500     0.196000   \n",
            "50%       0.055800      0.095400          0.001880     0.125000     0.417000   \n",
            "75%       0.098650      0.565500          0.643000     0.237000     0.677000   \n",
            "max       0.918000      0.996000          0.985000     0.987000     0.985000   \n",
            "\n",
            "             tempo   duration_ms  time_signature  \n",
            "count  5235.000000  5.235000e+03     5235.000000  \n",
            "mean    118.721407  2.479112e+05        3.902961  \n",
            "std      28.568463  1.356330e+05        0.420324  \n",
            "min       0.000000  3.276000e+04        0.000000  \n",
            "25%      96.174000  1.899910e+05        4.000000  \n",
            "50%     119.180000  2.246670e+05        4.000000  \n",
            "75%     134.019000  2.717200e+05        4.000000  \n",
            "max     213.990000  3.815787e+06        5.000000  \n",
            "name                0\n",
            "artist              0\n",
            "danceability        0\n",
            "energy              0\n",
            "key                 0\n",
            "loudness            0\n",
            "mode                0\n",
            "speechiness         0\n",
            "acousticness        0\n",
            "instrumentalness    0\n",
            "liveness            0\n",
            "valence             0\n",
            "tempo               0\n",
            "duration_ms         0\n",
            "time_signature      0\n",
            "id                  0\n",
            "html                0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Check for missing values and data types\n",
        "print(music_df.info())\n",
        "print(music_df.describe())\n",
        "print(music_df.isnull().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iVBtfyx22eqM"
      },
      "source": [
        "# 3. Scale data with Power Transformer\n",
        "\n",
        "I decided to use the **PowerTransformer** because it helps make the data more balanced and easier to work with. Many features, like loudness or tempo, can have uneven distributions or extreme values, which can confuse clustering algorithms like KMeans. The PowerTransformer adjusts these features to look more like a normal (bell-shaped) distribution, improving the clustering process. It also works well with negative or zero values, which makes it a flexible choice for this dataset.\n",
        "\n",
        "Steps in code\n",
        "1.  Power Transformation: Apply the PowerTransformer to make the data Gaussian-like.  \n",
        "2. Sampling: Use a sample of 50 rows for clearer visualization and faster computation.\n",
        "3. Visualization of Distributions: Compare the original and transformed distributions for a chosen parameter (e.g., 'loudness').\n",
        "4. Pairwise Distance Heatmaps: Visualize the difference in pairwise distances between original and transformed data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "aKSJVPzR48NH",
        "outputId": "035eb0f1-326d-4e2f-dce4-2a80eaba6b14"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of the full Power-Transformed DataFrame: (5235, 11)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   danceability    energy       key  loudness      mode  speechiness  \\\n",
              "0      0.671946 -1.366485  1.451493 -0.872257 -1.351545     0.203888   \n",
              "1      1.072584 -1.037604 -0.849005 -0.806268  0.739894    -1.043567   \n",
              "2      1.601005  0.100674 -0.849005 -0.574711  0.739894     1.977698   \n",
              "3      0.895392 -1.721861 -0.230296 -1.425873  0.739894    -0.528874   \n",
              "4      0.638825 -1.620882  0.305608 -1.580209  0.739894    -0.893477   \n",
              "\n",
              "   acousticness  instrumentalness  liveness   valence     tempo  \n",
              "0      1.284281         -0.773661  2.079107 -0.423042 -0.235735  \n",
              "1      0.242058         -0.774204 -0.503226  0.921178  0.279924  \n",
              "2      0.916119         -0.773616 -0.255319  1.533152 -0.866925  \n",
              "3      1.457701         -0.773835  1.522362  0.376164 -0.366653  \n",
              "4      1.485119         -0.770944 -0.549985 -0.055938  0.139074  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a00b39bd-a08c-4a98-b98f-6c9b29acbd58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.671946</td>\n",
              "      <td>-1.366485</td>\n",
              "      <td>1.451493</td>\n",
              "      <td>-0.872257</td>\n",
              "      <td>-1.351545</td>\n",
              "      <td>0.203888</td>\n",
              "      <td>1.284281</td>\n",
              "      <td>-0.773661</td>\n",
              "      <td>2.079107</td>\n",
              "      <td>-0.423042</td>\n",
              "      <td>-0.235735</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.072584</td>\n",
              "      <td>-1.037604</td>\n",
              "      <td>-0.849005</td>\n",
              "      <td>-0.806268</td>\n",
              "      <td>0.739894</td>\n",
              "      <td>-1.043567</td>\n",
              "      <td>0.242058</td>\n",
              "      <td>-0.774204</td>\n",
              "      <td>-0.503226</td>\n",
              "      <td>0.921178</td>\n",
              "      <td>0.279924</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.601005</td>\n",
              "      <td>0.100674</td>\n",
              "      <td>-0.849005</td>\n",
              "      <td>-0.574711</td>\n",
              "      <td>0.739894</td>\n",
              "      <td>1.977698</td>\n",
              "      <td>0.916119</td>\n",
              "      <td>-0.773616</td>\n",
              "      <td>-0.255319</td>\n",
              "      <td>1.533152</td>\n",
              "      <td>-0.866925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.895392</td>\n",
              "      <td>-1.721861</td>\n",
              "      <td>-0.230296</td>\n",
              "      <td>-1.425873</td>\n",
              "      <td>0.739894</td>\n",
              "      <td>-0.528874</td>\n",
              "      <td>1.457701</td>\n",
              "      <td>-0.773835</td>\n",
              "      <td>1.522362</td>\n",
              "      <td>0.376164</td>\n",
              "      <td>-0.366653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.638825</td>\n",
              "      <td>-1.620882</td>\n",
              "      <td>0.305608</td>\n",
              "      <td>-1.580209</td>\n",
              "      <td>0.739894</td>\n",
              "      <td>-0.893477</td>\n",
              "      <td>1.485119</td>\n",
              "      <td>-0.770944</td>\n",
              "      <td>-0.549985</td>\n",
              "      <td>-0.055938</td>\n",
              "      <td>0.139074</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a00b39bd-a08c-4a98-b98f-6c9b29acbd58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a00b39bd-a08c-4a98-b98f-6c9b29acbd58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a00b39bd-a08c-4a98-b98f-6c9b29acbd58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f9843ac-bdec-4693-88c5-e6881e675f95\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f9843ac-bdec-4693-88c5-e6881e675f95')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f9843ac-bdec-4693-88c5-e6881e675f95 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "power_scaled_full_df",
              "summary": "{\n  \"name\": \"power_scaled_full_df\",\n  \"rows\": 5235,\n  \"fields\": [\n    {\n      \"column\": \"danceability\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000095524669466,\n        \"min\": -2.2399651089151074,\n        \"max\": 2.17354445843362,\n        \"num_unique_values\": 882,\n        \"samples\": [\n          -0.5788368308369783,\n          -0.1250023850484078,\n          0.9910320187239279\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"energy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694623,\n        \"min\": -1.78652409727793,\n        \"max\": 1.4898432596642444,\n        \"num_unique_values\": 1191,\n        \"samples\": [\n          0.3700280761189747,\n          0.3653637891724065,\n          -0.6623643039066371\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"key\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694638,\n        \"min\": -1.6493068695070583,\n        \"max\": 1.4514934501295271,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -1.6493068695070583,\n          0.04545497239381384,\n          1.4514934501295271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loudness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694638,\n        \"min\": -3.48315597313598,\n        \"max\": 9.205397807385173,\n        \"num_unique_values\": 4310,\n        \"samples\": [\n          -1.0012760180985696,\n          0.24274619547582596,\n          -1.147847631002823\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694474,\n        \"min\": -1.3515449922554235,\n        \"max\": 0.7398939774333566,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7398939774333566,\n          -1.3515449922554235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"speechiness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694658,\n        \"min\": -3.134316834399473,\n        \"max\": 2.032525793434902,\n        \"num_unique_values\": 1001,\n        \"samples\": [\n          0.014404093764936487,\n          0.13481451588409166\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"acousticness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694638,\n        \"min\": -1.014198630382277,\n        \"max\": 1.5380371522159069,\n        \"num_unique_values\": 2545,\n        \"samples\": [\n          0.19780128559009308,\n          -0.39459377339927904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"instrumentalness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694583,\n        \"min\": -0.7742220197572337,\n        \"max\": 1.5519164964482504,\n        \"num_unique_values\": 2168,\n        \"samples\": [\n          0.5332153036143057,\n          -0.7741808942541487\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"liveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694634,\n        \"min\": -2.9574246775359194,\n        \"max\": 2.0815225471634244,\n        \"num_unique_values\": 1128,\n        \"samples\": [\n          1.6686044898042576,\n          -1.2826454596949965\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694625,\n        \"min\": -1.8029047563938547,\n        \"max\": 1.746667333288567,\n        \"num_unique_values\": 1267,\n        \"samples\": [\n          -1.6834673594487615,\n          -1.3303822683928617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tempo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000955246694634,\n        \"min\": -7.739788737177051,\n        \"max\": 2.8973920967810654,\n        \"num_unique_values\": 4824,\n        \"samples\": [\n          -1.0876707387669742,\n          1.0882062076188497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "# Sample the dataset for visualization\n",
        "sample_df = parameters_only_df.sample(50, random_state=42).reset_index(drop=True)\n",
        "\n",
        "# Create a PowerTransformer object\n",
        "scaler = PowerTransformer()\n",
        "\n",
        "# Apply the PowerTransformer to the sample\n",
        "power_scaled_sample_df = pd.DataFrame(scaler.fit_transform(sample_df),\n",
        "                                      columns=sample_df.columns)\n",
        "\n",
        "# Apply the PowerTransformer to the entire dataset\n",
        "power_scaled_full_df = pd.DataFrame(scaler.fit_transform(parameters_only_df),\n",
        "                                    columns=parameters_only_df.columns)\n",
        "\n",
        "# --- Visualization for the sample ---\n",
        "\n",
        "# Plot the distributions for a selected parameter (e.g., 'loudness')\n",
        "parameter_to_compare = 'loudness'  # Change this to any parameter you'd like to analyze\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n",
        "\n",
        "# Plot original distribution\n",
        "sns.histplot(data=sample_df[parameter_to_compare], bins=10, kde=True, ax=ax1)\n",
        "\n",
        "# Plot transformed distribution\n",
        "sns.histplot(data=power_scaled_sample_df[parameter_to_compare], bins=10, kde=True, ax=ax2)\n",
        "\n",
        "# Add titles\n",
        "ax1.set_title(f'Distribution of {parameter_to_compare} without scaling')\n",
        "ax2.set_title(f'Distribution of {parameter_to_compare} with Power transforming')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# --- Heatmap for the sample ---\n",
        "\n",
        "# Calculate pairwise distances for the original and Power-transformed samples\n",
        "original_distances_sample = pd.DataFrame(pairwise_distances(sample_df),\n",
        "                                         index=sample_df.index,\n",
        "                                         columns=sample_df.index)\n",
        "power_distances_sample = pd.DataFrame(pairwise_distances(power_scaled_sample_df),\n",
        "                                      index=power_scaled_sample_df.index,\n",
        "                                      columns=power_scaled_sample_df.index)\n",
        "\n",
        "# Create heatmaps for pairwise distances\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n",
        "\n",
        "# Heatmap for original distances\n",
        "sns.heatmap(original_distances_sample, ax=ax1, cmap='viridis', linewidths=.2)\n",
        "\n",
        "# Heatmap for transformed distances\n",
        "sns.heatmap(power_distances_sample, ax=ax2, cmap='viridis', linewidths=.2)\n",
        "\n",
        "# Add titles to the heatmaps\n",
        "ax1.set_title('Original Sample Pairwise Distances')\n",
        "ax2.set_title('Power Transformed Sample Pairwise Distances')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# --- Confirmation for the full dataset ---\n",
        "print(f\"Shape of the full Power-Transformed DataFrame: {power_scaled_full_df.shape}\")\n",
        "power_scaled_full_df.head()  # Display the first few rows of the full transformed dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nG7pCZkK7J-k"
      },
      "source": [
        "## Effects of PowerTransformer on Distribution and Heatmap\n",
        "\n",
        "| **Aspect**                  | **Before Power Transform**                                        | **After Power Transform**                                         |\n",
        "|-----------------------------|-------------------------------------------------------------------|-------------------------------------------------------------------|\n",
        "| **Distribution (e.g., Loudness)** | - Skewed towards the left (negative values dominate).<br>- Not Gaussian (bell-shaped).                 | - More symmetric and Gaussian-like.<br>- Data centered around 0 with smaller variability. |\n",
        "| **Range of Values**         | - Wide range (e.g., `-25` to `-5` in loudness).                  | - Compressed to a smaller range (e.g., approximately `-2` to `2`). |\n",
        "| **Pairwise Distances**       | - Distances heavily influenced by features with large scales or high variance.<br>- Uneven distribution across the heatmap. | - Distances normalized and more evenly distributed.<br>- Values better reflect true relationships between samples. |\n",
        "\n",
        "---\n",
        "\n",
        "### Summary\n",
        "The **PowerTransformer** reshaped the data to:\n",
        "1. Address skewness, making distributions more Gaussian-like.\n",
        "2. Normalize ranges, reducing the dominance of high-variance features.\n",
        "3. Balance pairwise distances, ensuring clustering algorithms like KMeans perform more effectively.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RLR1eID92q0c"
      },
      "source": [
        "# 4. PCA - Dimensionality Reduction\n",
        "Principal Components (PCs) are new features created by PCA (Principal Component Analysis) to summarize the most important information from your dataset while reducing its size.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zSZ2WoJCiaUN"
      },
      "source": [
        "1. **Original Features to PCs**:\n",
        "   - Your dataset might have many features (e.g., `loudness`, `tempo`).\n",
        "   - PCA combines these features into a smaller number of **Principal Components (PCs)**.\n",
        "   - Each PC is a weighted combination of the original features, capturing the main patterns in the data.\n",
        "\n",
        "2. **What Do PCs Represent?**\n",
        "   - **PC1** (Principal Component 1): Captures the most important variation in the data.\n",
        "   - **PC2** (Principal Component 2): Captures the second most important variation, orthogonal (independent) to PC1.\n",
        "   - **PC3, PC4, ...**: Capture additional variations, each explaining less variance than the previous.\n",
        "\n",
        "3. **Why Use PCs?**\n",
        "   - **Dimensionality Reduction**: Keeps only the most important patterns while reducing the number of features.\n",
        "   - **Noise Reduction**: Filters out less important variations in the data.\n",
        "   - **Visualization**: Allows us to plot high-dimensional data in 2D or 3D using the top PCs.\n",
        "\n",
        "---\n",
        "\n",
        "### Analogy:\n",
        "Imagine you have a book with 100 chapters. Instead of reading the whole book, PCA summarizes it into a few key points (PCs) that capture the main ideas, so you can understand the book's essence without all the details.\n",
        "\n",
        "\n",
        "## Steps in code\n",
        "\n",
        "1. Fit PCA: Reduce the dataset dimensions while retaining ~95% of its variance.\n",
        "2. Analyze Components: Examine how much variance each principal component explains.\n",
        "3. Visualize: Visualize the cumulative explained variance to determine the optimal number of components.\n",
        "4. Apply PCA: Transform the data using the selected number of components."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "SelKS1TlFB6U",
        "outputId": "ce8cddd9-e230-4082-eede-f23111df7322"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of components retained: 9\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of PCA-transformed DataFrame: (5235, 9)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        PC1       PC2       PC3       PC4       PC5       PC6       PC7  \\\n",
              "0 -1.028492  0.992881 -2.041676  2.353685 -0.535557 -0.251711  0.998637   \n",
              "1 -0.644653  2.098105  1.145850 -0.208087  0.412485 -0.046995 -0.114101   \n",
              "2  0.649149  1.715561  0.689993 -0.806566 -1.488244 -0.019115  2.272823   \n",
              "3 -1.723853  1.950039  0.591933  1.774576 -0.681256  0.106544  0.887565   \n",
              "4 -2.170188  1.901786  0.225026  0.127679  0.534966  0.695637  0.499953   \n",
              "\n",
              "        PC8       PC9  \n",
              "0 -0.643981 -0.083138  \n",
              "1  0.241417 -0.583204  \n",
              "2  0.559308 -0.221967  \n",
              "3 -0.080434 -0.343230  \n",
              "4 -0.476468 -0.340765  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6bd6806-1da3-4d4e-9da6-764b35b41671\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PC1</th>\n",
              "      <th>PC2</th>\n",
              "      <th>PC3</th>\n",
              "      <th>PC4</th>\n",
              "      <th>PC5</th>\n",
              "      <th>PC6</th>\n",
              "      <th>PC7</th>\n",
              "      <th>PC8</th>\n",
              "      <th>PC9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.028492</td>\n",
              "      <td>0.992881</td>\n",
              "      <td>-2.041676</td>\n",
              "      <td>2.353685</td>\n",
              "      <td>-0.535557</td>\n",
              "      <td>-0.251711</td>\n",
              "      <td>0.998637</td>\n",
              "      <td>-0.643981</td>\n",
              "      <td>-0.083138</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.644653</td>\n",
              "      <td>2.098105</td>\n",
              "      <td>1.145850</td>\n",
              "      <td>-0.208087</td>\n",
              "      <td>0.412485</td>\n",
              "      <td>-0.046995</td>\n",
              "      <td>-0.114101</td>\n",
              "      <td>0.241417</td>\n",
              "      <td>-0.583204</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.649149</td>\n",
              "      <td>1.715561</td>\n",
              "      <td>0.689993</td>\n",
              "      <td>-0.806566</td>\n",
              "      <td>-1.488244</td>\n",
              "      <td>-0.019115</td>\n",
              "      <td>2.272823</td>\n",
              "      <td>0.559308</td>\n",
              "      <td>-0.221967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.723853</td>\n",
              "      <td>1.950039</td>\n",
              "      <td>0.591933</td>\n",
              "      <td>1.774576</td>\n",
              "      <td>-0.681256</td>\n",
              "      <td>0.106544</td>\n",
              "      <td>0.887565</td>\n",
              "      <td>-0.080434</td>\n",
              "      <td>-0.343230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-2.170188</td>\n",
              "      <td>1.901786</td>\n",
              "      <td>0.225026</td>\n",
              "      <td>0.127679</td>\n",
              "      <td>0.534966</td>\n",
              "      <td>0.695637</td>\n",
              "      <td>0.499953</td>\n",
              "      <td>-0.476468</td>\n",
              "      <td>-0.340765</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6bd6806-1da3-4d4e-9da6-764b35b41671')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c6bd6806-1da3-4d4e-9da6-764b35b41671 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c6bd6806-1da3-4d4e-9da6-764b35b41671');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7df4ffa0-7b7d-49cf-be88-44d63dbdf42e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7df4ffa0-7b7d-49cf-be88-44d63dbdf42e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7df4ffa0-7b7d-49cf-be88-44d63dbdf42e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "pca_transformed_df",
              "summary": "{\n  \"name\": \"pca_transformed_df\",\n  \"rows\": 5235,\n  \"fields\": [\n    {\n      \"column\": \"PC1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.702144967399438,\n        \"min\": -5.671315134253101,\n        \"max\": 6.157522115346039,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -3.2069889826421414,\n          1.0313693293066435,\n          1.6693038953209884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.497699771668261,\n        \"min\": -3.8049728837097563,\n        \"max\": 3.1273370864540606,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          0.37881920134936636,\n          -2.9866586817225964,\n          1.4478669858863706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.079357231398783,\n        \"min\": -2.447754868813651,\n        \"max\": 2.3959020680521323,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -0.6413829325676315,\n          -1.6903704588038098,\n          1.3939147455060477\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9839529696911954,\n        \"min\": -3.6892433030672023,\n        \"max\": 2.910889190368034,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -0.05225780184014628,\n          0.5419054743938061,\n          1.1449211403604886\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9704420558026997,\n        \"min\": -5.279182273762748,\n        \"max\": 3.1601830547923617,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -0.752606573139017,\n          -1.2521517708041794,\n          -1.5601677881718272\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9199815401127779,\n        \"min\": -2.550517933911105,\n        \"max\": 1.9957612980573682,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          1.5734837159209123,\n          -0.1938647334277084,\n          -0.3447405987051004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8361541554744176,\n        \"min\": -4.464188607817295,\n        \"max\": 3.1750610776607546,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          0.06588365287123338,\n          -1.055946798249288,\n          -0.47271347613682385\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7116212817465297,\n        \"min\": -2.115075521036829,\n        \"max\": 2.5214068520194766,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -1.483976790310025,\n          0.09603736484648831,\n          0.4222505936551287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PC9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.561845430634196,\n        \"min\": -3.5087106824113885,\n        \"max\": 5.897049302987995,\n        \"num_unique_values\": 5160,\n        \"samples\": [\n          -0.5882406080833227,\n          0.9441395252497998,\n          0.587089532754058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Step 1: Fit PCA to retain ~95% variance\n",
        "pca = PCA(n_components=0.95)  # Keep components that explain 95% of the variance\n",
        "pca_features = pca.fit_transform(power_scaled_full_df)  # Use the FULL Power Transformed dataset\n",
        "print(f\"Number of components retained: {pca.n_components_}\")\n",
        "\n",
        "# Step 2: Explained Variance by Components\n",
        "explained_variance_ratio = pca.explained_variance_ratio_\n",
        "cumulative_variance = np.cumsum(explained_variance_ratio)\n",
        "\n",
        "# Step 3: Visualize Cumulative Explained Variance\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(range(1, len(cumulative_variance) + 1), cumulative_variance, marker='o', label='Cumulative Variance')\n",
        "plt.axhline(y=0.95, color='r', linestyle='--', label='95% Variance Threshold')\n",
        "plt.title('Cumulative Explained Variance by Principal Components')\n",
        "plt.xlabel('Number of Principal Components')\n",
        "plt.ylabel('Cumulative Explained Variance')\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n",
        "\n",
        "# Step 4: Transform the Dataset\n",
        "pca_transformed_df = pd.DataFrame(pca_features, columns=[f'PC{i+1}' for i in range(pca.n_components_)])\n",
        "print(f\"Shape of PCA-transformed DataFrame: {pca_transformed_df.shape}\")\n",
        "pca_transformed_df.head()  # Display the first few rows\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LRcwEwtOGYRG"
      },
      "source": [
        "### Interpretation of Results:\n",
        "\n",
        "1. **Cumulative Explained Variance**:  \n",
        "   The red dashed line in the plot shows that **9 principal components (PCs)** capture **95% of the important information** in the dataset. This means we can work with fewer features while still keeping most of the data's variability.\n",
        "\n",
        "2. **Reduced Dataset**:  \n",
        "   The dataset is now summarized using just 9 new features (`PC1`, `PC2`, ..., `PC9`). These features combine the original ones in a way that focuses on the key patterns, making the data easier to work with.\n",
        "\n",
        "3. **Clustering-Friendly**:  \n",
        "   Using PCA removes unnecessary details and noise, which helps clustering methods like **KMeans** work better. It simplifies the data, making it easier to group songs into meaningful clusters.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E8iKKf4c29hA"
      },
      "source": [
        "# 5. Clusters -choosing optimal number\n",
        "\n",
        "When using clustering algorithms like **KMeans**, choosing the optimal number of clusters is critical to ensure meaningful and accurate groupings of the data. If the number of clusters is too small, the model might miss important differences in the data. If it's too large, it might overfit and create unnecessary complexity.\n",
        "\n",
        "**Business requirement:**  In this case the goal is to create playlists between 50 and 250 songs. Dataset has roughly 5000 songs, that means that I explore having between 20 and 100 clusters.\n",
        "\n",
        "To determine the ideal number of clusters, we use two techniques:\n",
        "1. **Elbow Method** (Inertia): Identifies the point where adding more clusters stops significantly reducing the within-cluster variance (inertia).\n",
        "2. **Silhouette Method**: Evaluates the quality of clusters by measuring how similar a sample is to its own cluster compared to other clusters."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "hkeMS_TXKUvr",
        "outputId": "0c5d5e93-9d78-464b-d65a-ab31ccfe9704"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"5be5a255-e366-4fbc-a77b-82e826c27935\" class=\"plotly-graph-div\" style=\"height:500px; width:900px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5be5a255-e366-4fbc-a77b-82e826c27935\")) {                    Plotly.newPlot(                        \"5be5a255-e366-4fbc-a77b-82e826c27935\",                        [{\"hovertemplate\":\"Number of clusters=%{x}\\u003cbr\\u003eInertia score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"xaxis\":\"x\",\"y\":[20470.89451908203,20419.45901402513,20022.986293011218,19599.859538028653,19398.819806490723,19323.61622539141,18948.82355927654,18669.966810122365,18333.42285059772,18058.57494646541,17841.899263949792,17757.249742422726,17569.276176539362,17359.546383335502,17158.356915211283,16938.470583153096,16824.298663872403,16741.617762084858,16484.372025749533,16265.495266487318,16160.92285075871,15980.466739791831,15888.892471791034,15793.25264771879,15591.65474902663,15464.868659090142,15369.229328298035,15241.014502900001,15062.03421971596,14965.261875431293,14881.344068437336,14746.914460052429,14611.809171924375,14553.267993038951,14383.368526325336,14252.762712320204,14167.001710769684,14071.387577743359,14018.05626565769,13931.36861303693,13745.54869536183,13639.406351971982,13585.379837654122,13465.160704340477,13375.532450191999,13305.767965231229,13287.486460380156,13184.253588383905,13118.846641573049,13055.680830606136,12956.596642757657,12891.816297290183,12892.354763196148,12841.39225267964,12785.843305756367,12748.665521694094,12693.504675007456,12573.77693706634,12518.909653740644,12484.852924312141,12449.36253102501,12438.638079086264,12355.007936210026,12269.012940155422,12168.20615426147,12151.430714371218,12059.867115192481,12029.38687976076,11996.01979638343,11906.906394565722,11840.43477198524,11767.02546491295,11762.62550101505,11704.477659575012,11634.250617194282,11596.349914582932,11545.16587102812,11522.835701551161,11425.220029345104,11376.199099979682,11343.133128796924],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of clusters\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Inertia score\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"height\":500,\"width\":900,\"title\":{\"text\":\"Inertia score from 20 to 100 clusters (PCA-transformed Data)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('5be5a255-e366-4fbc-a77b-82e826c27935');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Elbow Method\n",
        "from sklearn.cluster import KMeans\n",
        "import plotly.express as px\n",
        "\n",
        "# Decide on a random_state to use\n",
        "seed = 123\n",
        "\n",
        "# Set the range for the number of clusters based on business requirement\n",
        "min_k = 20\n",
        "max_k = 100\n",
        "\n",
        "### 1. Inertia and Elbow Method ###\n",
        "\n",
        "# Create an empty list to store the inertia scores\n",
        "inertia_list = []\n",
        "\n",
        "for i in range(min_k, max_k + 1):  # 20 to 100 clusters\n",
        "    kmeans = KMeans(n_clusters=i, n_init=\"auto\", random_state=seed)\n",
        "    kmeans.fit(pca_transformed_df)  # Use PCA-transformed data\n",
        "    inertia_list.append(kmeans.inertia_)\n",
        "\n",
        "# Create a line chart for inertia\n",
        "fig_inertia = px.line(\n",
        "    x=range(min_k, max_k + 1),\n",
        "    y=inertia_list,\n",
        "    markers=True,\n",
        "    width=900,\n",
        "    height=500,\n",
        "    labels={'x': 'Number of clusters', 'y': 'Inertia score'}\n",
        ")\n",
        "\n",
        "fig_inertia.update_layout(\n",
        "    title=f\"Inertia score from {min_k} to {max_k} clusters (PCA-transformed Data)\",\n",
        "    xaxis_title=\"Number of clusters\",\n",
        "    yaxis_title=\"Inertia score\"\n",
        ")\n",
        "\n",
        "fig_inertia.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 517
        },
        "id": "VDBFH-xwNA_L",
        "outputId": "fb4fa8dc-01c0-4093-aeb9-72881d297450"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"06528354-9322-4d04-b2f6-49a02baacfbc\" class=\"plotly-graph-div\" style=\"height:500px; width:900px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"06528354-9322-4d04-b2f6-49a02baacfbc\")) {                    Plotly.newPlot(                        \"06528354-9322-4d04-b2f6-49a02baacfbc\",                        [{\"hovertemplate\":\"Number of clusters=%{x}\\u003cbr\\u003eSilhouette score=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"xaxis\":\"x\",\"y\":[0.13975414247088616,0.13281840195104255,0.13454294904752045,0.1372841295140727,0.1388242148419219,0.1391670207334361,0.14124485817461538,0.14079553645864923,0.14274485381596055,0.14406636409559342,0.1432549183880505,0.14373378479695567,0.14346904288180543,0.14302532152498637,0.14157600940629214,0.14226365355183526,0.1405435282744935,0.13914033208521473,0.14162712095970126,0.14357025244989693,0.14423008698051937,0.144440976110031,0.14410233555411558,0.14348366807142413,0.14549427811315896,0.14548100446366558,0.14388761292423433,0.14395138883790862,0.1462950844691367,0.14562545412138556,0.14558275688335212,0.1440002787533892,0.1459636083271602,0.14276227962533478,0.14590855488616752,0.1461843734942462,0.14578180391224344,0.14605718092439085,0.14602927772925978,0.14547566895068276,0.1474286239186176,0.14755229402388612,0.1449355317283654,0.14625765941749788,0.1481516241203771,0.14797988857323935,0.14698209945673754,0.14578240972034323,0.14536727754408565,0.14489068310594255,0.14589250472652843,0.14603519321704567,0.1442555751321694,0.14463313942657377,0.14352405041582342,0.14266257715300962,0.14182407718702997,0.1431556328431697,0.14417615260305106,0.143748491402343,0.14335823007153528,0.14251489406172038,0.14276645140380395,0.14393900325027384,0.1439245366192609,0.14323283151916122,0.14488677882565779,0.14428378713843795,0.14264937949025638,0.1432928506662165,0.1426862565856091,0.14373697656703666,0.140764932347193,0.14011904128143765,0.14167324149640642,0.14114108753683913,0.14139620516948864,0.14037981090793697,0.14180747715203126,0.14184246099949643,0.1414583926463888],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Number of clusters\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Silhouette score\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"height\":500,\"width\":900,\"title\":{\"text\":\"Silhouette score from 20 to 100 clusters (PCA-transformed Data)\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('06528354-9322-4d04-b2f6-49a02baacfbc');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Silhouette Method\n",
        "from sklearn.metrics import silhouette_score\n",
        "import plotly.express as px\n",
        "\n",
        "# Create an empty list to store the silhouette scores\n",
        "sil_scores = []\n",
        "\n",
        "for j in range(min_k, max_k + 1):  # 20 to 100 clusters\n",
        "    kmeans = KMeans(n_clusters=j, n_init=\"auto\", random_state=seed)\n",
        "    kmeans.fit(pca_transformed_df)  # Use PCA-transformed data\n",
        "    labels = kmeans.labels_  # Get cluster labels\n",
        "    score = silhouette_score(pca_transformed_df, labels)  # Calculate silhouette score\n",
        "    sil_scores.append(score)\n",
        "\n",
        "# Create a line chart for silhouette scores\n",
        "fig_silhouette = px.line(\n",
        "    x=range(min_k, max_k + 1),\n",
        "    y=sil_scores,\n",
        "    markers=True,\n",
        "    width=900,\n",
        "    height=500,\n",
        "    labels={'x': 'Number of clusters', 'y': 'Silhouette score'}\n",
        ")\n",
        "\n",
        "fig_silhouette.update_layout(\n",
        "    title=f\"Silhouette score from {min_k} to {max_k} clusters (PCA-transformed Data)\",\n",
        "    xaxis_title=\"Number of clusters\",\n",
        "    yaxis_title=\"Silhouette score\"\n",
        ")\n",
        "\n",
        "fig_silhouette.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZpOLOVkySKxo"
      },
      "source": [
        "### Results of Clustering Analysis:\n",
        "\n",
        "#### Elbow Method:\n",
        "- The **Inertia Score** plot suggests that the curve starts to flatten between **30-40 clusters**. This indicates diminishing returns in reducing inertia as the number of clusters increases.\n",
        "- Based on the elbow method, a good choice for the number of clusters would be **30-40**.\n",
        "\n",
        "#### Silhouette Method:\n",
        "- The **Silhouette Score** plot shows a peak around **50 clusters**, with stable scores between **40-60 clusters**.\n",
        "- The highest silhouette score suggests **50 clusters**, indicating better-defined and more well-separated clusters.\n",
        "\n",
        "#### Final Recommendation:\n",
        "- **50 clusters** is recommended based on the Silhouette Method, as it provides the most well-defined clusters with the highest separation between data points.\n",
        "- *Alternatively, if computational cost is a concern, **30 clusters** can be considered as a compromise based on the Elbow Method.*\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uHFHIaIt3IV6"
      },
      "source": [
        "# 6. Apply KMeans and assing clusters\n",
        "\n",
        "Step 1: Apply KMeans:\n",
        "* Creates a KMeans object with n_clusters=50, meaning the data will be divided into 50 clusters.\n",
        "* Fits the algorithm to the PCA-transformed dataset (pca_transformed_df), which contains the reduced features.\n",
        "* Assigns each song to a cluster and adds the cluster labels as a new column ('Cluster') in the pca_transformed_df.\n",
        "\n",
        "\n",
        "\n",
        "Step 2: Add Cluster Labels:\n",
        "* Copies the cluster labels from the PCA-transformed dataset to the original dataset (parameters_only_df).\n",
        "* This links the clusters back to the original song features, allowing for further analysis and interpretation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "BKeOpeqRX_VQ"
      },
      "outputs": [],
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Step 1: Apply KMeans with 50 clusters\n",
        "optimal_clusters = 50\n",
        "kmeans = KMeans(n_clusters=optimal_clusters, random_state=42, n_init=\"auto\")\n",
        "pca_transformed_df['Cluster'] = kmeans.fit_predict(pca_transformed_df)\n",
        "\n",
        "# Step 2: Add cluster labels back to the original dataset\n",
        "parameters_only_df['Cluster'] = pca_transformed_df['Cluster']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H3xOr1mf3Omc"
      },
      "source": [
        "# 7. View Playlists"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "77uYczsUa0VO",
        "outputId": "577f5a10-1940-41ae-fddf-1374d1e80a52"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Playlist for Cluster 15 ---\n",
            "                                                         name                artist                                                  html\n",
            "                                                   Muizenberg          John Wizards https://open.spotify.com/track/3lcG2ak2Fv85SkZuHjFqNl\n",
            "                                                       Ms. Ho                  Onra https://open.spotify.com/track/6vQHxIHj6mFAsHgP6F52tf\n",
            "                                                   Painkiller          Judas Priest https://open.spotify.com/track/0L7zm6afBEtrNKo6C6Gj08\n",
            "                                            Only for the Weak             In Flames https://open.spotify.com/track/03zYFtluA21jFWQVPMbUYO\n",
            "                                      Who Will Be Not Be Dead                Seance https://open.spotify.com/track/46NuBcPN0BlWKzj7ZOYybq\n",
            "                                                 The Bleeding       Cannibal Corpse https://open.spotify.com/track/17X3hKnGxGle8QRpead0Ks\n",
            "                                              Before the Dawn           Necrophobic https://open.spotify.com/track/0ywPeaPqWdgAm9HXOGa8zh\n",
            "                                            Unfound Mortality           Benediction https://open.spotify.com/track/6omWnLeOErUKUGoc8zyDqn\n",
            "                                                     Mourning          Nirvana 2002 https://open.spotify.com/track/5CY8Z3zZB87NUgFVehnI45\n",
            "                                                 Behold Judas          Hate Eternal https://open.spotify.com/track/1pDaIv4kERYDqeCzYDpZ80\n",
            "                                                        Rabid             Mortician https://open.spotify.com/track/5OuBnBrF86yVo511Ufu1pe\n",
            "                                             Bleeding Torment           Necrophagia https://open.spotify.com/track/2puMdQfKbBb7Hgbc2dDeMg\n",
            "Dead Body Love - Pungent Stench / Disharmonic Orchestra Split        Pungent Stench https://open.spotify.com/track/6BgXXckMSkL9ogbNhhYZZf\n",
            "                                                  Human Waste           Suffocation https://open.spotify.com/track/14TWQ7ad76cm2bRenUfCFV\n",
            "                                                  Deliverance                 Opeth https://open.spotify.com/track/4siXNiLG9VJR6Z2kP6fFjv\n",
            "                                        Lock up Your Children          Morbid Saint https://open.spotify.com/track/6KH3n3ZjCcqvjt3SK7e0xW\n",
            "                                                     Dog Days               Comecon https://open.spotify.com/track/6IMSfnU1eFJCaM19d1TTqj\n",
            "                                                   Democrator               Comecon https://open.spotify.com/track/1vuZMeQQvyhQRlrciJG5Di\n",
            "                                     Regurgitation of Giblets               Carcass https://open.spotify.com/track/6Ig1bVFf3XPvEFjRtI1ypU\n",
            "                             Pyosisified (Rotten to the Gore)               Carcass https://open.spotify.com/track/5vMtxOOzsNfgXVUih0Q4Xl\n",
            "                                                 Carnal Forge               Carcass https://open.spotify.com/track/0zjexZk84g6tQCKT7hd379\n",
            "                                                    Heartwork               Carcass https://open.spotify.com/track/3wNILeoQCtHguNEam5le75\n",
            "                                                    Catacombs          Hate Eternal https://open.spotify.com/track/4gHSMLVxtBqS2vTqb2ygzV\n",
            "                                Visions from Beyond the Grave             Nocturnus https://open.spotify.com/track/5HqlQ0wlqg82Z8p2Mm7e01\n",
            "                                           Inner Incineration          Napalm Death https://open.spotify.com/track/17P2Bd2QDTYUhFhroRCxq9\n",
            "   Miscarriage - Pungent Stench / Disharmonic Orchestra Split        Pungent Stench https://open.spotify.com/track/75DT7DlrjKbl86Fz48RVKw\n",
            "                   Molecular Disembowelment - Demo Recordings        Pungent Stench https://open.spotify.com/track/3ImkmtnrsuDhUktNh6oyCo\n",
            "                                             Bodily Corrupted               Gorguts https://open.spotify.com/track/3q8llk7XdkKvm6NCtS6eCT\n",
            "                                    City of Screaming Statues          At The Gates https://open.spotify.com/track/1L99VIVreS2Oytar9IpHD9\n",
            "                                                 Omega Factor     Killing Addiction https://open.spotify.com/track/7hAtmYtMlJNHzUKfmV9FSS\n",
            "                                                 Morbid Death             Interment https://open.spotify.com/track/7e670yK7UtCQKYFeMOelCR\n",
            "                                          The Cemetary's Full             Deceased… https://open.spotify.com/track/5cIckPPPWkJJOfjUACJduk\n",
            "                                             Wings of Funeral                Morbid https://open.spotify.com/track/2ZwK8kFfFygmQ9rlQJF1BS\n",
            "                                 Rotting Spiritual Embodiment           Incantation https://open.spotify.com/track/0NWYZHO0MlFgQURhHM7bx4\n",
            "                                             Open the Abscess               Exhumed https://open.spotify.com/track/3UhYJQKJAeFAQZw7HUp6W7\n",
            "                                        Postmortem Procedures               Exhumed https://open.spotify.com/track/44Yk30hkf3mRq2yKRRTVSy\n",
            "                                               Limb from Limb               Exhumed https://open.spotify.com/track/6ElhqEkvahcWem7nqMfddM\n",
            "                                                Casketkrusher               Exhumed https://open.spotify.com/track/4whq3YyAAxUw5SIOTxmPIT\n",
            "                                          Marital Declimation           Suffocation https://open.spotify.com/track/1ocXO3yHyZYiRzu4Z8vm79\n",
            "                                              Grizzled Finale           Benediction https://open.spotify.com/track/53MkfoPvy5HElIaEcMZfDp\n",
            "                                                The Grotesque           Benediction https://open.spotify.com/track/0Kq2NuNYcV7LznqOVtMnpe\n",
            "                                                        Crawl              Entombed https://open.spotify.com/track/4a5gVxZKDmEsNdI8aiqZyQ\n",
            "                                        The Nocturnal Silence           Necrophobic https://open.spotify.com/track/2hwnIYr93UrE63SBXSj9At\n",
            "                                    Soulside Journey - Studio            Darkthrone https://open.spotify.com/track/702PchwBVAoVST46GxDxNA\n",
            "                                          Pandemonic Outbreak               Therion https://open.spotify.com/track/260neCOshG3wRJjD49LPeB\n",
            "                                            Culpable Homicide      Eternal Solstice https://open.spotify.com/track/2nPJrF2ZfBtqEN0XRDbWQ3\n",
            "                                               Blood Brothers   Malevolent Creation https://open.spotify.com/track/0ptkVNdGoeHLDsZ5CZlu7q\n",
            "                                                     I am god         Vital Remains https://open.spotify.com/track/3yOTPjV8G90UoAY67LXUtZ\n",
            "                                                The Forteress              Agressor https://open.spotify.com/track/1otviBOlT3Ball9Qm0TWDp\n",
            "                                             My Beloved Enemy                Asphyx https://open.spotify.com/track/5fkQ7mjIkayo60X3ICYO5R\n",
            "      Inherited Rowel Levitation - Reduced Without Any Effort              Demilich https://open.spotify.com/track/3a7ZijXizcXMpZg7BPS2Di\n",
            "                  The Faces Right Below the Skin of the Earth              Demilich https://open.spotify.com/track/78Il4uvXABzhLjtSkXvlHf\n",
            "                                       Emptiness of Vanishing              Demilich https://open.spotify.com/track/796RAmokzZtm4ruQjjjM57\n",
            "                                          Ominous Lamentation       General Surgery https://open.spotify.com/track/5hXwhzrOCMhy5wwbCrtoZ6\n",
            "                                                       Martyr          Fear Factory https://open.spotify.com/track/1PGWezmLt3WUvl8CiJgl3q\n",
            "                                            Demon Of The Fall                 Opeth https://open.spotify.com/track/4UyHN8xiWTytFyirUNl1Pk\n",
            "                                         Summoning Redemption          Morbid Angel https://open.spotify.com/track/3NLUCyLS1HLrzkbsKg30lJ\n",
            "                              Severe Burns - Drowned Demo '89              Nihilist https://open.spotify.com/track/2tG1U2fUhgehuJscyoAVtD\n",
            "                                            A Mental Sequence Disharmonic Orchestra https://open.spotify.com/track/7woOk9WrDwY9I4Alw4lgk8\n",
            "                                        Engorged With Impiety           Broken Hope https://open.spotify.com/track/0nw9jNJCyXlkA5mY7Ech7V\n",
            "                                                Freezer Burnt           Broken Hope https://open.spotify.com/track/7kz8QQ148alvp1WnJpiKtF\n",
            "                                                          Sin                Seance https://open.spotify.com/track/0eqBEpRIfLue7dzGNYTTg6\n",
            "                                           Blasphemous Verses              Convulse https://open.spotify.com/track/2OFuUqKx90ttzlGpbBiisS\n",
            "                                            Divorced from God                 Altar https://open.spotify.com/track/2YBE4ubZnknKASnir4u6Ze\n",
            "                                                       Shiver               Funebre https://open.spotify.com/track/2ZnoeViImBYIQKuN7DTiTz\n",
            "                                   The Art of Self-Mutilation             Indungeon https://open.spotify.com/track/3vL18PepBq60wuprCbekXt\n",
            "                                                    Morticide               Comecon https://open.spotify.com/track/7LMHgNOxdqITEPTdSiuq61\n",
            "                                         Shrine of the Master             Brutality https://open.spotify.com/track/3CnodhcirIpgoheZvr5QHC\n",
            "                                              Sickish Disease              Mortuary https://open.spotify.com/track/5UDnX0OPo4ENiL6lZGkQ6y\n",
            "                    The Truth Begins Where Man Stops to Think            Agathocles https://open.spotify.com/track/132vhP5UfNqdWkt4CY1Zd5\n",
            "                                                     Infernal      Defaced Creation https://open.spotify.com/track/5bJcuMbcstXH1LVxFvmHqt\n",
            "                                              Ancient Slumber           Necrophagia https://open.spotify.com/track/5RSTgkiHCEK222JDpCh1PX\n",
            "                                     Darkness Forever (Bonus)            Jungle Rot https://open.spotify.com/track/5ra5LcUmrG06h9V8P3am02\n",
            "\n",
            "--- Playlist for Cluster 6 ---\n",
            "                                                     name              artist                                                  html\n",
            "                                     Empire State Of Mind               JAY-Z https://open.spotify.com/track/3lPAHV0b53zgRRm9LBgnTY\n",
            "                                                 Sayonara               BEAUZ https://open.spotify.com/track/0GusQ8k0CXS3DLPz5pvzy8\n",
            "                                               Youngblood 5 Seconds of Summer https://open.spotify.com/track/55S2PQgSMYAhgoTCcGCDfw\n",
            "                                                  TiK ToK               Kesha https://open.spotify.com/track/5OMwQFBcte0aWFJFqrr5oj\n",
            "                   Five More Hours - Deorro x Chris Brown              Deorro https://open.spotify.com/track/6f1QFKG6GSBKdh7zfbj9rc\n",
            "                                   Policeman - Radio Edit          Eva Simons https://open.spotify.com/track/70dj3uEzmhUmGK3M0amaup\n",
            "                                       I'm Still Standing          Elton John https://open.spotify.com/track/0lzpfrTARexLFXEACKSXTh\n",
            "                                                  TiK ToK               Kesha https://open.spotify.com/track/0HPD5WQqrq7wPWR7P7Dw1i\n",
            "                                                    Toxic      Britney Spears https://open.spotify.com/track/4fbaKWFRghusXd4bSBvvfN\n",
            "                                                 Survivor     Destiny's Child https://open.spotify.com/track/2Mpj1Ul5OFPyyP4wB62Rvi\n",
            "                                            Irreplaceable             Beyoncé https://open.spotify.com/track/6RX5iL93VZ5fKmyvNXvF1r\n",
            "                                           Live Your Life                T.I. https://open.spotify.com/track/3jlbL2OTD5YmIunYzgQTAN\n",
            "                                                  Pump It     Black Eyed Peas https://open.spotify.com/track/2ygMBIctKIAfbEBcT9065L\n",
            "                                               Youngblood 5 Seconds of Summer https://open.spotify.com/track/2iUXsYOEPhVqEBwsqP70rE\n",
            "                                        Where The Hood At                 DMX https://open.spotify.com/track/7fXb8yG4gCsioqzJNZOv69\n",
            "                                           Look At Me Now         Chris Brown https://open.spotify.com/track/7EKTo6rVJ3XSS7QTd6ep2j\n",
            "                          Let's Go (feat. Big D & Twista)         Trick Daddy https://open.spotify.com/track/1fLibtVj3MrNTwRZq5yUOs\n",
            "                                           Window Shopper             50 Cent https://open.spotify.com/track/0NJu93oln1kkgbHLFzLJ4h\n",
            "                                                  Duality            Slipknot https://open.spotify.com/track/61mWefnWQOLf90gepjOCb3\n",
            "                                               Chop Suey!    System Of A Down https://open.spotify.com/track/5V3mdRI2yQxbSsJGDPc5lD\n",
            "                                       Roots Bloody Roots           Sepultura https://open.spotify.com/track/6ursmCnbc9oDRGa2yHKkoZ\n",
            "                                                      Dig            Mudvayne https://open.spotify.com/track/3H0ZY55seypgo0zXI6zwRk\n",
            "                                                 Toulouse        Nicky Romero https://open.spotify.com/track/5X1AUaISN82uhF5DA7Ea3K\n",
            "                 Sparks (Turn Off Your Mind) - Radio Edit      Fedde Le Grand https://open.spotify.com/track/12C80VvfoJc2mQ75HZUL0X\n",
            "                            Howl At The Moon - Radio Edit            Stadiumx https://open.spotify.com/track/68G6yStcwiWWYSIJYcsmN7\n",
            "                                          Five More Hours              Deorro https://open.spotify.com/track/6YwLgicpvVuMt1eE2OldwQ\n",
            "                              Close to Me (feat. Gary Go)       Benny Benassi https://open.spotify.com/track/08fEhzvFxp6gqlf7GkPTe3\n",
            "                  Cinema (feat. Gary Go) - Skrillex Remix       Benny Benassi https://open.spotify.com/track/6jNM6fKx3WnyHbWBI9hs2r\n",
            "                                         Internet Friends         Knife Party https://open.spotify.com/track/5qFL2uwfnGU8FccwLMgPNQ\n",
            "                           Rave After Rave - Original Mix                 W&W https://open.spotify.com/track/26UkElAazA0LQQs0auxh4x\n",
            "        Sunrise (Won't Get Lost) - Tommy Trash Radio Edit   The Aston Shuffle https://open.spotify.com/track/09Fp1IvPIvevpO6cKAEeGw\n",
            "                                 Stars Troll - Radio Edit             Kaskade https://open.spotify.com/track/7G2OW2MDFfj3U1xf6BvozZ\n",
            "                                       Feet On The Ground        Nicky Romero https://open.spotify.com/track/31G5t1OTwYoxJAXyxAtn5s\n",
            "                                                   Recess            Skrillex https://open.spotify.com/track/1RJZLVGpBG9nNZiHRQSWTp\n",
            "                           Wildcard (feat. Sidnie Tipton)               KSHMR https://open.spotify.com/track/7yz7xxHAG4ChgrSeMvIXIo\n",
            "                 Can't Feel My Face - Martin Garrix Remix          The Weeknd https://open.spotify.com/track/22SXyL6pUjwIvGWvgGjLov\n",
            "                                                    Sally            Hardwell https://open.spotify.com/track/2sft9NbDLTl0Y1KpXVBfV5\n",
            "                                                 Bludfire          Eva Simons https://open.spotify.com/track/5nrvC5Ly6IQPKTHd1OOjS5\n",
            "                                        I Think I Like It          Fake Blood https://open.spotify.com/track/37e1l7liDUzE9j0OPKP5Ea\n",
            "                                  You & Me - Baauer Remix          Disclosure https://open.spotify.com/track/6ZHvzEdmTqGQyH2svHKGQV\n",
            "                                            Dancing Alone  Axwell /\\ Ingrosso https://open.spotify.com/track/5xzzxWj8a1YBbNZhNLqWuQ\n",
            "                        Silence - Tiësto's Big Room Remix          Marshmello https://open.spotify.com/track/3AUW7mAGx1BICBWqsuFgh4\n",
            "                      Purple Lamborghini (with Rick Ross)            Skrillex https://open.spotify.com/track/6JyuJFedEvPmdWQW0PkbGJ\n",
            "                                             Up All Night               R3HAB https://open.spotify.com/track/5RugEn59RTnWE4IM4uBaC9\n",
            "                                                D.A.N.C.E             Justice https://open.spotify.com/track/33yAEqzKXexYM3WlOYtTfQ\n",
            "                                 To Ü (feat. AlunaGeorge)              Jack Ü https://open.spotify.com/track/3UgSQu6WwrXfKKDq019IHE\n",
            "                                      The Giver (Reprise)         Duke Dumont https://open.spotify.com/track/3hL4XmNfqWcqngSYaMgFR6\n",
            "Badman Riddim (Jump) (feat. Foreign Beggars) - Radio Edit       Vato Gonzalez https://open.spotify.com/track/78wsBqsglpf22jchAd0499\n",
            "                                                    Molly      Cedric Gervais https://open.spotify.com/track/5H4fXPTFSpkNWsFT6RrmYY\n",
            "                                                   Parade               VINAI https://open.spotify.com/track/3ijGepiKtkSoRU0FmB7XLN\n",
            "                              First of the Year (Equinox)            Skrillex https://open.spotify.com/track/5i7fZq3chLyCHo3VeB6goD\n",
            "                                               Five Hours              Deorro https://open.spotify.com/track/6r7FXNO57mlZCBY6PXcZZT\n",
            "                                                    Freak               R3HAB https://open.spotify.com/track/0bbM9yJYKSi8PSubMQaUYu\n",
            "                                                Marrakech               R3HAB https://open.spotify.com/track/4Jp79uh7FDCzkSEr88zdjm\n",
            "                        Nasty Ways (feat. Lorreia Loushy)            Dillinja https://open.spotify.com/track/53TFvcQoCYaGytR1HezNlL\n",
            "                                             Need To Know           Wilkinson https://open.spotify.com/track/5HJ4yYnf81RoyqvGvYQKv5\n",
            "                                       Salgo Pa' la Calle        Daddy Yankee https://open.spotify.com/track/3nCFiwtuVqVJmnSasApvr3\n",
            "                                                 Fantasma                Zion https://open.spotify.com/track/0qtmSv1LAqAD63ApakCUuz\n",
            "                                                Sin Miedo              Reykon https://open.spotify.com/track/6hWW4e5GeZpppndu1IwKzR\n",
            "                                               Es Dificil        De La Ghetto https://open.spotify.com/track/2yIt5SGOZCHE2PuzcXfOof\n",
            "                                       See Through Dreams               Death https://open.spotify.com/track/0Ol4yC4mvESix1mkYoSsI9\n",
            "                                           Christmas EveL          Stray Kids https://open.spotify.com/track/0hnsWcb5a4H3IpAbSXeLPg\n",
            "                                                    SPICY                  CL https://open.spotify.com/track/0KGn1PDH5cqmD4B8GMVfae\n",
            "                                                  GAMBLER            Monsta X https://open.spotify.com/track/1Zsy7gMUcHDhxC0bbyZmC2\n",
            "        Es ist geil ein Arschloch zu sein - Radio Version           Christian https://open.spotify.com/track/7FalyYEX2URpR9CEYS8Z2W\n",
            "                                      An Tagen wie diesen         Fettes Brot https://open.spotify.com/track/3jkp8fGwMxKVGZbNNYccnZ\n",
            " Prison Break Anthem (Ich Glaub An Dich) - Single Version                Azad https://open.spotify.com/track/1mC06CRaWGhsWhdX99GJqL\n",
            "                                            Im Ascheregen              Casper https://open.spotify.com/track/1CeW79VAEYmvtyPfIQY8G8\n",
            "                                                 La Playa         Myke Towers https://open.spotify.com/track/0jeS8PyyIRAG0A3t5DtL71\n",
            "                                              Here We Are       Cross Worship https://open.spotify.com/track/3Edww8KursYqB9E9MLHRXC\n",
            "                                    All Of My Help - Live       Ricky Dillard https://open.spotify.com/track/154bIY3JeBAexCaxSF5B5m\n",
            "                          You Brought The Sunshine - Live   The Clark Sisters https://open.spotify.com/track/2yK4879j9Q1XnJio6ETqJV\n",
            "\n",
            "--- Playlist for Cluster 19 ---\n",
            "                                                                                                name                           artist                                                  html\n",
            "                                                                         Se Eu Quiser Falar Com Deus                     Gilberto Gil https://open.spotify.com/track/1n7JnwviZ7zf0LR1tcGFq7\n",
            "                                                                                            Madalena                   Maria Gasolina https://open.spotify.com/track/33u3dO0JWjerYpFN61J3ug\n",
            "                                                                                    Chega De Saudade                    João Gilberto https://open.spotify.com/track/65GsUbgQju5Mh0Ab7CRUWB\n",
            "                                                                                         Rebel Rebel                        Seu Jorge https://open.spotify.com/track/2rIzPAaLY6ocCanj5H7edQ\n",
            "                                                                                    Karoliina Kaunis                   Maria Gasolina https://open.spotify.com/track/7BlLxHwobm2gHjXev9dNVe\n",
            "                                                                                       O Amor Em Paz              Cannonball Adderley https://open.spotify.com/track/4PwzeZs0cTVuzZbCmw85hc\n",
            "                                                                                             Mariana                        Seu Jorge https://open.spotify.com/track/2BkIiZYOniMrWBBlADyVNX\n",
            "                                                                                     August Day Song                   Bebel Gilberto https://open.spotify.com/track/7fnFmtEpfKLnJRkayFeeZ5\n",
            "                                                                                                 OBI                 Toots Thielemans https://open.spotify.com/track/1FSrV96XeBhJZQ4qIaOR79\n",
            "                                                                                          Laia Ladia                   Brazilian Jazz https://open.spotify.com/track/5BUYtDh62uirLH4vMnE2dA\n",
            "                                                                                        Samba Triste                        Stan Getz https://open.spotify.com/track/0KY71RFPZJPqR04jOQFUw2\n",
            "                                                                                           Corcovado                        Stan Getz https://open.spotify.com/track/0bQViEvXvH8iNl8hRRkU5o\n",
            "                                                                                         Menina Moca                        Stan Getz https://open.spotify.com/track/5LtticIcN2PoWNV43w3Xmm\n",
            "                                                                                              Homens                        Manu Chao https://open.spotify.com/track/19SaQ50zJG69AUrr4uBkAS\n",
            "                                                                                Lisboa menina e moça                  Various Artists https://open.spotify.com/track/1ygyaDfAly6uDoRi6bm3yU\n",
            "                                                                             Guarda-me A Vida Na Mão                        Ana Moura https://open.spotify.com/track/7l7d9M7hSNef7DJ9p2718X\n",
            "                                                                                    Berekerê - Voice                  Geraldo Azevedo https://open.spotify.com/track/4tJ1bFWFJ6teL8hTObeXC4\n",
            "                                                                                            Pois Foi                         Deolinda https://open.spotify.com/track/2zAh10cRcPXgFsanshnOAS\n",
            "                                                                                         Clandestino                      Chico César https://open.spotify.com/track/6pugaRBHKXcCN9Lq0xJjg9\n",
            "                                                                                       Agua De Beber                  Astrud Gilberto https://open.spotify.com/track/4SSADZr3VsQeoqNbjLXw8W\n",
            "                                                                                          Fotografia                  Vanessa Da Mata https://open.spotify.com/track/2x6usZA1U6sWdRrlXbbTN5\n",
            "                                                                                   Chorinho Pra Voce                      Paulo Moura https://open.spotify.com/track/2srgmIDmA3Q8BIc8auSYa2\n",
            "                                                                                   Chorando Baixinho                  Raphael Rabello https://open.spotify.com/track/36dZLR4pZq5gas8YpdMIEQ\n",
            "                                                                           Desde Que o Samba é Samba                     Gilberto Gil https://open.spotify.com/track/2MScXeRUExfFsGudzTckV9\n",
            "                                                                               Diz Que Eu Fui Por Aí                    Eva Fernández https://open.spotify.com/track/4e8CIzAEnAVVVS1tNCMmEp\n",
            "                                                                                    Berekerê - Voice                  Geraldo Azevedo https://open.spotify.com/track/4tJ1bFWFJ6teL8hTObeXC4\n",
            "                                                                                          Dimokránsa                    Mayra Andrade https://open.spotify.com/track/1e8fUVkBW3cL5cRU6Ic36d\n",
            "                                                                                         Meu Esquema                  Mundo Livre S/A https://open.spotify.com/track/5hO3HgwIygwqjkGsw6wdP3\n",
            "                                                                                       Trem Das Onze                 Adoniran Barbosa https://open.spotify.com/track/2TI5GBkbrrFtZRM5v1heeb\n",
            "                                                                                           Sonho Meu                  Dona Ivone Lara https://open.spotify.com/track/4wUzJax4y4a6jIhbF28LoC\n",
            "                                                           Nega Maluca / Billie Jean / Eleanor Rigby                   Caetano Veloso https://open.spotify.com/track/3614O0eE1Q8YKvOnCPtWtZ\n",
            "                                                                                     Get Out Of Town                   Caetano Veloso https://open.spotify.com/track/5zX4wtlOEYHGnS9bizVatv\n",
            "                                                                                         Rebel Rebel                        Seu Jorge https://open.spotify.com/track/0gwNAMVAXRvERlC16eZXyA\n",
            "                                                                                              Homens                        Manu Chao https://open.spotify.com/track/4WAdzFPrvnq77ZS7woIkfv\n",
            "                                                               Se eu quiser falar com Deus - Ao vivo                     Gilberto Gil https://open.spotify.com/track/7juNpUD2eKlSPBTdgr8EGC\n",
            "                                                                                     Get Out Of Town                   Caetano Veloso https://open.spotify.com/track/3ZQ4ImZjzOWCgyz6mBEHnj\n",
            "                                                                                     Guns Of Brixton                   Nouvelle Vague https://open.spotify.com/track/57byua1wdKVH3DM7qRoQ6l\n",
            "                                                                                               Sushi                           Cocoon https://open.spotify.com/track/1cXPkN2uKjwWRPhtssrRLX\n",
            "                                                                              Canción Del Extranjero                      Nacho Vegas https://open.spotify.com/track/0lBa7yynCMneCRM5xQCcVh\n",
            "                                                                                  Something About Us                        Daft Punk https://open.spotify.com/track/1NeLwFETswx8Fzxl2AFl91\n",
            "                                                                                   Ain't No Sunshine                    Nancy Sinatra https://open.spotify.com/track/2XTaMoUqPlJL8PLQnVNvlD\n",
            "                                                                         The Dress Looks Nice on You                   Sufjan Stevens https://open.spotify.com/track/0oEyXbHhtUBqKdKHewG8Cn\n",
            "                                                                                          Bonatology                     Richard Bona https://open.spotify.com/track/6TaKGAOEsoPz2Uu0HLUhKX\n",
            "                                                                                  Alfonsina Y El Mar                    Mercedes Sosa https://open.spotify.com/track/3IJdWvDzT1lUyemmA7PTO7\n",
            "                                                                                   Koop Island Blues                             Koop https://open.spotify.com/track/4K375NCv5eSw7aOM1hgJZn\n",
            "                                                                                  Zamba del carnaval   Lorena Astudillo & Daniel Maza https://open.spotify.com/track/1Hfgps1Nri40uQ8gS2AGLZ\n",
            "                                                                            Mort d'un heroi romàntic                            Manel https://open.spotify.com/track/2AKnsRHRxIoYMlV1aOfhSW\n",
            "                                                                                     De Mi Esperanza                    Jorge Cafrune https://open.spotify.com/track/5XqXlrZLx0xPN5gSsfWPYF\n",
            "                                                                                  Zamba Del Carnaval                      Pedro Aznar https://open.spotify.com/track/3NNRdQduyl3MzJQE1chyRb\n",
            "                                                                    California Dreamin' - Remastered                     Bobby Womack https://open.spotify.com/track/3ChKtS6fpy2XrLnT60meKq\n",
            "                                                                                          Gallo Rojo                           Refree https://open.spotify.com/track/3Eo7gYxGRMlwUgZVN2OYZw\n",
            "                                                                                 Island (Nôze Remix)                 Dapayk & Padberg https://open.spotify.com/track/2QP0moUeWZ9n50mp4UIo2h\n",
            "                                                                                  Limit To Your Love                      James Blake https://open.spotify.com/track/5wZbNyht0kr3Tu8BkW4hux\n",
            "                                                                                           It's Real                      Real Estate https://open.spotify.com/track/6TlLq2hP4KtTLiEp8MYmS4\n",
            "                                                                                Who Do I Think I Am?                            Woods https://open.spotify.com/track/1JbFidSkGeV7ux0nhUE0Rh\n",
            "                                                                                    Heavenly Pop Hit                       The Chills https://open.spotify.com/track/0iwvgz7kQAnF9DREWhg49g\n",
            "                                                                                      Plora guitarra     Joana Pons amb ses guitarres https://open.spotify.com/track/2u7zaBwiRpdYIVI8zPCWtq\n",
            "                                                                                              Alaska                    Maggie Rogers https://open.spotify.com/track/1MsyEbEQca1sfC9JnkKnOm\n",
            "                                                                            Tú Que Vienes a Rondarme       Maria Arnal i Marcel Bagés https://open.spotify.com/track/2bC2DSTXoDaCjRW6AIdzUu\n",
            "                                                                                  Lait de coco - Dub                             Maya https://open.spotify.com/track/5A73Nnju5DCi8EV6wPvI5H\n",
            "                                                                                               Yummy                    Justin Bieber https://open.spotify.com/track/41L3O37CECZt3N7ziG2z7l\n",
            "                                                                                 Great Balls Of Fire                  Jerry Lee Lewis https://open.spotify.com/track/3YmELj8vHY6mKIzphgtQlM\n",
            "                                                                                 (‘Til) I Kissed You              The Everly Brothers https://open.spotify.com/track/1vVY5vd4kowd70TdTuEjfV\n",
            "                                                                             I Get A Kick Out Of You                    Frank Sinatra https://open.spotify.com/track/3mKdw0slI6wmnb1FBrvwn2\n",
            "                                                  Volare (Nel Blu Di Pinto Di Blu) - Remastered 1998                      Dean Martin https://open.spotify.com/track/5OkKOkdVTKFrYi6GWXkMzR\n",
            "                                                                                         You Send Me                        Sam Cooke https://open.spotify.com/track/7fPOOCejoBt3dIm6UcEdm8\n",
            "                                                        Autumn in New York - 2003 Remastered Version                   Billie Holiday https://open.spotify.com/track/5y3gqKswDeU8pJ878YFPUy\n",
            "                                                                                      Jailhouse Rock                    Elvis Presley https://open.spotify.com/track/4gphxUgq0JSFv2BCLhNDiE\n",
            "                                                                      Just In Time - Remastered/1998                      Dean Martin https://open.spotify.com/track/1UzlJGnPQLCIDAHuKSjQQT\n",
            "                                                                                               Fever                        Peggy Lee https://open.spotify.com/track/2CeqxyOZEyiL6pTDYZ9gPH\n",
            "                  Wonderful! Wonderful! (with Ray Conniff & His Orchestra & Chorus) - Single Version                    Johnny Mathis https://open.spotify.com/track/5bDVkMLsBJgNL3eejUhBKF\n",
            "                                                                                    Teach Me Tonight                 Dinah Washington https://open.spotify.com/track/0Rk9byjmZksAJX15onGns5\n",
            "                                                                                     Come Go With Me                  The Del-Vikings https://open.spotify.com/track/4IYyGIbMS5ZkxDXGfPIrXr\n",
            "                                                                       Ain't No Mountain High Enough                      Marvin Gaye https://open.spotify.com/track/2H3ZUSE54pST4ubRd5FzFR\n",
            "                                                      Mrs. Robinson - From \"The Graduate\" Soundtrack                Simon & Garfunkel https://open.spotify.com/track/0iOZM63lendWRTTeKhZBSC\n",
            "                                                             God Only Knows - Mono / 1997 Remastered                   The Beach Boys https://open.spotify.com/track/6iGU74CwXuT4XVepjc9Emf\n",
            "                                                                   Good Vibrations - Remastered 2001                   The Beach Boys https://open.spotify.com/track/2oF7FZHIJbzjeEXZ3D0Ku4\n",
            "                                                                                      Lay, Lady, Lay                        Bob Dylan https://open.spotify.com/track/4uYwlMp841PLJmj1gJJwIq\n",
            "                                                      Ferry Cross the Mersey - Stereo; 1997 Remaster           Gerry & The Pacemakers https://open.spotify.com/track/3NFScsiDPfCzKgQQUL0674\n",
            "                                                                   What Becomes Of The Brokenhearted                     Jimmy Ruffin https://open.spotify.com/track/7Bvap2GAW2DAyZ7EVUJpMO\n",
            "                                                                    What the World Needs Now Is Love                   Dionne Warwick https://open.spotify.com/track/4GipxMgLhzh1cFW5U1HH6t\n",
            "                                                                                             Delilah                        Tom Jones https://open.spotify.com/track/2v8B8d17Xxu9uLU5sNiHSL\n",
            "                                                                                                Easy                       Commodores https://open.spotify.com/track/0wtHjEAzLYYyGuk2WtpGwS\n",
            "                                                                           Midnight Train to Georgia         Gladys Knight & The Pips https://open.spotify.com/track/7MF7QAodbGzNYav5ZfIhAY\n",
            "                                                                                        American Pie                       Don McLean https://open.spotify.com/track/1fDsrQ23eTAVFElUMaf38X\n",
            "                                                                           Moondance - 2013 Remaster                     Van Morrison https://open.spotify.com/track/683b4ikwa62JevCjwrmfg6\n",
            "                                                              The Air That I Breathe - 2008 Remaster                      The Hollies https://open.spotify.com/track/6yLIqXX9edg1x0HZS7cZEv\n",
            "                                                                                What a Fool Believes              The Doobie Brothers https://open.spotify.com/track/2yBVeksU2EtrPJbTu4ZslK\n",
            "                                                                                       It's Too Late                      Carole King https://open.spotify.com/track/4etJ8NpS7YJ6vViV2UEJit\n",
            "                                               Jive Talkin' - From \"Saturday Night Fever\" Soundtrack                         Bee Gees https://open.spotify.com/track/4t0Pj3iBnSCZv5pDEPNmzG\n",
            "                                                                       Heart of Gold - 2009 Remaster                       Neil Young https://open.spotify.com/track/1Q1b8eVkUPGlpSArl8JAVw\n",
            "                                                                                           Landslide                    Fleetwood Mac https://open.spotify.com/track/5ihS6UUlyQAfmp48eSkxuQ\n",
            "                                                                                A Horse with No Name                          America https://open.spotify.com/track/54eZmuggBFJbV7k248bTTt\n",
            "                                                                                 Let's Stay Together                         Al Green https://open.spotify.com/track/63xdwScd1Ai1GigAwQxE8y\n",
            "                                                                                             I Swear                        All-4-One https://open.spotify.com/track/4WUnM4KNZ0kjp0CUeoyOnS\n",
            "                                                                                    Kiss from a Rose                             Seal https://open.spotify.com/track/0z5E34e7ZT3XKMYQNXh6tH\n",
            "                                                                                       Back To Black                    Amy Winehouse https://open.spotify.com/track/3FAclTFfvUuQYnEsptbK8w\n",
            "                                                                                        Love Someone                     Lukas Graham https://open.spotify.com/track/3id2EVGKc3eFAMn9nFnB0r\n",
            "          Carmen / Act 2: Toreador Song: \"Votre toast, je peux vous le rendre\" (from Carmen / Act 2)                    Georges Bizet https://open.spotify.com/track/0BcbSvjOZ9dUDmXAcnqmeO\n",
            "                                                                                      This Is Always                     Betty Carter https://open.spotify.com/track/6Kr25pa3pTd4no3yA0EcW1\n",
            "                                                                                  Autumn In New York                  Ella Fitzgerald https://open.spotify.com/track/0f2489MzoisF9pKduawvce\n",
            "                                                                                      Hipsippy Blues Art Blakey & The Jazz Messengers https://open.spotify.com/track/3iFlfQ0CXc9URaAvai8VUe\n",
            "                                                                  I Can't Give You Anything But Love                      Sonny Clark https://open.spotify.com/track/5doczA8CcUYo0J9H7uvHgU\n",
            "                                                                                          Summertime                   Charlie Parker https://open.spotify.com/track/09g9OlH3RDjbffMAnvBPgw\n",
            "                                                                      But Not For Me - Vocal Version                       Chet Baker https://open.spotify.com/track/3pfbQmD5xGH9Tcc7GqGfSL\n",
            "                                                                                      Alone Together                        Peggy Lee https://open.spotify.com/track/47xU4Sm1RWZgRgugWPFxzz\n",
            "                                                                                    Teach Me Tonight                 Dinah Washington https://open.spotify.com/track/0Rk9byjmZksAJX15onGns5\n",
            "                                                                                      Line For Lyons                   Gerry Mulligan https://open.spotify.com/track/0GUUhTWMylAx5pHDI42t1V\n",
            "                                                                                     Close Your Eyes Art Blakey & The Jazz Messengers https://open.spotify.com/track/3vlX5kFfQHDloPDV1cGENX\n",
            "                                                                         You Don't Know What Love Is                 Dinah Washington https://open.spotify.com/track/2TPRvPvUotVn4tGHAWWcog\n",
            "                                                                                      I Remember You                       Lee Konitz https://open.spotify.com/track/5eMz1VtT2zNtsyh1bDgDhb\n",
            "                                                                  I'll Remember April - Instrumental                       Chet Baker https://open.spotify.com/track/74HwaWwtVa2buG8OIHZkgs\n",
            "                                                                                              O Pato                        Stan Getz https://open.spotify.com/track/5PXIzyJURVKyO1cwVDuGEK\n",
            "                                                             Corcovado (Quiet Nights Of Quiet Stars)                        Stan Getz https://open.spotify.com/track/0xcJPMoBe9FenntXbfyx97\n",
            "                                                                          Midnight Blue - Remastered                    Kenny Burrell https://open.spotify.com/track/2kF9Ijd7I2Kk2P4bYqUmzG\n",
            "                                                                    Solar - Rudy Van Gelder Remaster              Miles Davis Quintet https://open.spotify.com/track/16KZuJfRKqMZQvmOibsVqX\n",
            "                                                          The Way You Look Tonight - 2003 Remastered                     Paul Desmond https://open.spotify.com/track/7yYgBAj3yaMdTgq7fIvDlQ\n",
            "                                                                                           All of Me                   Billie Holiday https://open.spotify.com/track/1LGqJ3nvxpVXDWpEzq4DJD\n",
            "                                                             A Love Supreme, Pt. I – Acknowledgement                    John Coltrane https://open.spotify.com/track/0CLbmkYmQIWiEwnsbOkLpd\n",
            "                                                                              Blues Inn - Remastered                    Jackie McLean https://open.spotify.com/track/7Kwi4xmgY4qQwOhBe0zsbh\n",
            "                                                                                              Louise                   Lionel Hampton https://open.spotify.com/track/4z1E9GltZHciLum0ybby9h\n",
            "                                                                                      Cool Struttin'                      Sonny Clark https://open.spotify.com/track/7CnOzCWGrTINcDExG6u99y\n",
            "                                                                                 Lullaby Of Birdland                    Sarah Vaughan https://open.spotify.com/track/5z161QQZMgQxSILnv3QoJk\n",
            "                                                                                             Questar                    Keith Jarrett https://open.spotify.com/track/1ChYuSIoOFDVY6fHSXF6zS\n",
            "                                                                        One For Daddy-O - Remastered              Cannonball Adderley https://open.spotify.com/track/4f0D7T8yswXUJ62AKLoMtS\n",
            "                                                              Serenade To A Soul Sister - Remastered                    Horace Silver https://open.spotify.com/track/1duGF26RKaTntfsJ0cTkzj\n",
            "Milestones (feat. John Coltrane, Cannonball Adderley, Red Garland, Paul Chambers & Philly Joe Jones)                      Miles Davis https://open.spotify.com/track/1xicvSO4CJ2ymqYgpk7DFh\n",
            "                                                                                       Autumn Leaves              Cannonball Adderley https://open.spotify.com/track/0X5DcGkbxCXSadgj01ZXd7\n",
            "                                                                                Moanin' - Remastered                       Art Blakey https://open.spotify.com/track/4Vkk3iD1VrENHJEACNddvt\n",
            "                                                                                       Body and Soul                  Coleman Hawkins https://open.spotify.com/track/2xm9ihELo6xwrRKrBbPql9\n",
            "                                                                                  Song For My Father                    Horace Silver https://open.spotify.com/track/1CDBaGlisZlOJzvx88lL8A\n",
            "                                                                      A Love Supreme, Pt. IV - Psalm                    John Coltrane https://open.spotify.com/track/5FLQmLjjeNIuC8U5mDnXC8\n",
            "                                         They Can't Take That Away from Me - 2012 Remastered Version                        Mel Tormé https://open.spotify.com/track/2Ef24NcyyZAMngL4uQd3xC\n",
            "                     All of You (feat. John Coltrane, Red Garland, Paul Chambers & Philly Joe Jones)                      Miles Davis https://open.spotify.com/track/21HG0QIgIcVQ2EZeXubaqL\n",
            "                                                 My Baby Just Cares for Me - 2013 Remastered Version                      Nina Simone https://open.spotify.com/track/6VTbbVjKOC2qWagIDbkJrC\n",
            "                'Round Midnight (feat. John Coltrane, Red Garland, Paul Chambers & Philly Joe Jones)                      Miles Davis https://open.spotify.com/track/5vb7At47uO0yPGfmYnAHuw\n",
            "                                                  Django - Rudy Van Gelder Edition / Remastered 1999                      Grant Green https://open.spotify.com/track/4w7EnqiLksvE6rcuR8F8bn\n",
            "                                                                                          Monticello         The Monty Alexander Trio https://open.spotify.com/track/0FKnknau5UBXgN2Q6vVHgC\n",
            "                                                                                            Cool Out                     Leroy Hutson https://open.spotify.com/track/489alJQIWUauqzKTMuXRjm\n",
            "                                                                                          Footprints                      Miles Davis https://open.spotify.com/track/2wjHWYJVAs5TYSRP83JLmc\n",
            "                                                                                   Be - Instrumental                    Steve Angello https://open.spotify.com/track/3tQJXZX51aJg8AIfMoG3eK\n",
            "                                                                                        Sky and Sand                 Paul Kalkbrenner https://open.spotify.com/track/4IsHMzDbRE8q5Z4ALsQj3o\n",
            "                                                                                     Stop That Train                      Keith & Tex https://open.spotify.com/track/4lrwg5ZBwcyRQ92seMGhIf\n",
            "                                                               East of the River Nile - 1971 Version                   Augustus Pablo https://open.spotify.com/track/44Oy8VNAjajn6zT2BRUxzy\n",
            "                                                                                           Zerrissen                             Juli https://open.spotify.com/track/7bxg2E5fDa8MWUn3pK5XuB\n",
            "                                                                            Erste Liebe (First Time)                          Rapsoul https://open.spotify.com/track/4r8GJb0oDb0ftP14JuOdlZ\n",
            "                                                                                 Wie weit ist vorbei                       Rosenstolz https://open.spotify.com/track/6hw8Bm5THhfUgIvHuCgPzq\n",
            "                                                                                           Ohne dich                              TEY https://open.spotify.com/track/2GRdWNcGrsInpq0mACQ3DI\n",
            "                                                                                            Amorfoda                        Bad Bunny https://open.spotify.com/track/68QcquxCS39cQGTsRrJWIR\n",
            "                                                                                 Anyhow - Radio Edit                     Tye Tribbett https://open.spotify.com/track/4YYMP4WMs75a36aHeMOBEX\n",
            "                                                                                               Grace                      Kelly Price https://open.spotify.com/track/4dKwDayzoCJMIO5RyF5FFf\n",
            "                                                                                   When Sunday Comes                      Daryl Coley https://open.spotify.com/track/1JIyzwxYKUktXe7tn4oqk9\n",
            "                                                                                      I Need You Now                    Smokie Norful https://open.spotify.com/track/44q2DhInsQYJ8X1q2H1RNj\n",
            "                                                                                             High Up                 Jonathan Traylor https://open.spotify.com/track/0drumuKkSeMz3CH5kGfOEl\n",
            "                                                                            I Trust You - Radio Edit                 Jonathan Traylor https://open.spotify.com/track/5qZREphIiL2VQ4IvuxgRnH\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "\n",
        "# Select 3 random clusters\n",
        "random_clusters = random.sample(range(optimal_clusters), 3)\n",
        "\n",
        "# Display the playlist for each randomly chosen cluster\n",
        "for cluster_id in random_clusters:\n",
        "    print(f\"\\n--- Playlist for Cluster {cluster_id} ---\")\n",
        "    cluster_songs = music_df[music_df.index.isin(parameters_only_df[parameters_only_df['Cluster'] == cluster_id].index)]\n",
        "    cluster_playlist = cluster_songs[['name', 'artist', 'html']]  # Include song name, artist, and link\n",
        "    print(cluster_playlist.to_string(index=False))  # Display the playlist without index\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "xlFLCusje5Py"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tbDxP7Bvigul"
      },
      "source": [
        "# Spotify API to create playlist"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n2_8jzvKilCd",
        "outputId": "7b9f1fab-3d61-4b2f-b941-53d33f59452e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting spotipy\n",
            "  Downloading spotipy-2.24.0-py3-none-any.whl.metadata (4.9 kB)\n",
            "Collecting redis>=3.5.3 (from spotipy)\n",
            "  Downloading redis-5.2.0-py3-none-any.whl.metadata (9.1 kB)\n",
            "Requirement already satisfied: requests>=2.25.0 in /usr/local/lib/python3.10/dist-packages (from spotipy) (2.32.3)\n",
            "Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from spotipy) (2.2.3)\n",
            "Requirement already satisfied: async-timeout>=4.0.3 in /usr/local/lib/python3.10/dist-packages (from redis>=3.5.3->spotipy) (4.0.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.0->spotipy) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.0->spotipy) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.0->spotipy) (2024.8.30)\n",
            "Downloading spotipy-2.24.0-py3-none-any.whl (30 kB)\n",
            "Downloading redis-5.2.0-py3-none-any.whl (261 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m261.4/261.4 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: redis, spotipy\n",
            "Successfully installed redis-5.2.0 spotipy-2.24.0\n"
          ]
        }
      ],
      "source": [
        "\n",
        "!pip install spotipy"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FEdatedSmRmY"
      },
      "source": [
        "1. Select one random cluster from your database (parameters_only_df with Cluster column).\n",
        "2. Extract all songs (with Spotify links) for the selected cluster.\n",
        "3. Create a playlist on Spotify with all the songs from the selected cluster."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import spotipy\n",
        "import pickle\n",
        "from spotipy.oauth2 import SpotifyOAuth\n",
        "from google.colab import userdata # only in Google Colab for secret management\n",
        "\n",
        "# Step 1: Spotify credentials\n",
        "spotify_client_id = userdata.get('spotify_client_id') # Replace with your actual Client ID\n",
        "spotify_client_secret = userdata.get('spotify_client_secret') # Replace with your actual Client Secret\n",
        "username=userdata.get('username')\n",
        "redirect_uri = \"http://localhost:8000/\"  # Ensure this matches your Spotify Developer settings\n",
        "\n",
        "# Step 2: Define the desired scope and username\n",
        "scope = 'user-read-private playlist-modify-public'\n",
        "username = 'username'\n",
        "redirectUri = 'redirect_uri'\n",
        "client_id = 'spotify_client_secret'\n",
        "client_secret = 'spotify_client_secret'\n",
        "\n",
        "# Step 3: Authenticate using SpotifyOAuth\n",
        "token = SpotifyOAuth(scope=scope,\n",
        "                     username=username,\n",
        "                     client_id=client_id,\n",
        "                     client_secret=client_secret,\n",
        "                     redirect_uri=redirectUri,\n",
        "                     open_browser=False # this line is need in Colab, but not on local machine\n",
        "                     )\n",
        "spotifyObject = spotipy.Spotify(auth_manager = token)\n"
      ],
      "metadata": {
        "id": "UjWtCd54hv4q"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import spotipy\n",
        "from spotipy.oauth2 import SpotifyOAuth\n",
        "from google.colab import userdata  # Only in Google Colab for secure input\n",
        "\n",
        "# Step 1: Fetch Spotify credentials securely using userdata\n",
        "spotify_client_id = userdata.get('spotify_client_id')  # Enter your actual Client ID when prompted\n",
        "spotify_client_secret = userdata.get('spotify_client_secret')  # Enter your actual Client Secret when prompted\n",
        "redirect_uri = \"http://localhost:8000/\"  # Ensure this matches your Spotify Developer Dashboard\n",
        "\n",
        "# Step 2: Define scope for Spotify API\n",
        "scope = 'user-read-private playlist-modify-public'\n",
        "\n",
        "# Step 3: Authenticate using SpotifyOAuth\n",
        "auth_manager = SpotifyOAuth(\n",
        "    client_id=spotify_client_id,\n",
        "    client_secret=spotify_client_secret,\n",
        "    redirect_uri=redirect_uri,\n",
        "    scope=scope,\n",
        "    open_browser=False  # Required in Google Colab\n",
        ")\n",
        "\n",
        "# Initialize Spotify object\n",
        "spotifyObject = spotipy.Spotify(auth_manager=auth_manager)\n",
        "\n",
        "# Step 4: Test the connection\n",
        "try:\n",
        "    user_profile = spotifyObject.me()\n",
        "    print(f\"Authenticated as: {user_profile['display_name']}\")\n",
        "    print(f\"Spotify ID: {user_profile['id']}\")\n",
        "except Exception as e:\n",
        "    print(f\"Authentication failed: {e}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "X5yQFUNvvLAL",
        "outputId": "c6cbce6b-74b1-49b8-976e-639d0032ee33"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-55-c7d270f072eb>\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;31m# Step 4: Test the connection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0muser_profile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspotifyObject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mme\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Authenticated as: {user_profile['display_name']}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Spotify ID: {user_profile['id']}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36mme\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1235\u001b[0m             \u001b[0mAn\u001b[0m \u001b[0malias\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mthe\u001b[0m \u001b[0;34m'current_user'\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1236\u001b[0m         \"\"\"\n\u001b[0;32m-> 1237\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"me/\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1239\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcurrent_user\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_get\u001b[0;34m(self, url, args, payload, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"GET\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpayload\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_post\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpayload\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_internal_call\u001b[0;34m(self, method, url, payload, params)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"http\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m             \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprefix\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m         \u001b[0mheaders\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_auth_headers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m\"content_type\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"params\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_auth_headers\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    240\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m             \u001b[0mtoken\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_access_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mas_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m             \u001b[0mtoken\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_access_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36mget_access_token\u001b[0;34m(self, code, as_dict, check_cache)\u001b[0m\n\u001b[1;32m    523\u001b[0m         payload = {\n\u001b[1;32m    524\u001b[0m             \u001b[0;34m\"redirect_uri\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mredirect_uri\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m             \u001b[0;34m\"code\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_auth_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m             \u001b[0;34m\"grant_type\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"authorization_code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         }\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36mget_auth_response\u001b[0;34m(self, open_browser)\u001b[0m\n\u001b[1;32m    487\u001b[0m                                redirect_host, redirect_host)\n\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_auth_response_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen_browser\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mopen_browser\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_authorization_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36m_get_auth_response_interactive\u001b[0;34m(self, open_browser)\u001b[0m\n\u001b[1;32m    438\u001b[0m                 \u001b[0;34m\"Enter the URL you were redirected to: \"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m             )\n\u001b[0;32m--> 440\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_user_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    441\u001b[0m         \u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSpotifyOAuth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_auth_response_url\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36m_get_user_input\u001b[0;34m(prompt)\u001b[0m\n\u001b[1;32m    108\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mraw_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mNameError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Parameters\n",
        "playlist_collection = {}\n",
        "n_clusters = parameters_only_df['Cluster'].nunique()  # Number of clusters in your data\n",
        "\n",
        "# Loop through each cluster to create playlists\n",
        "for i in range(n_clusters):  # Iterate through clusters\n",
        "    playlist_name = f\"My_Playlist_Cluster_{i}\"  # Name for each playlist\n",
        "    playlist_description = \"This is a test playlist generated from clustering.\"\n",
        "\n",
        "    # Create a playlist on Spotify\n",
        "    playlist_id = spotifyObject.user_playlist_create(user=username,\n",
        "                                                     name=playlist_name,\n",
        "                                                     public=True,\n",
        "                                                     description=playlist_description)['id']\n",
        "\n",
        "    # Select 5 random songs from the current cluster\n",
        "    id_list = list(music_df.loc[parameters_only_df[\"Cluster\"] == i]\n",
        "                   .sample(5, random_state=42)  # Select 5 random songs\n",
        "                   .html.str.split(':').str[-1])  # Extract Spotify track IDs from `html` column\n",
        "\n",
        "    # Format the track IDs as Spotify URIs\n",
        "    uris = [f'spotify:track:{str(track_id).strip()}' for track_id in id_list]\n",
        "\n",
        "    # Add tracks to the Spotify playlist\n",
        "    spotifyObject.user_playlist_add_tracks(user=username, playlist_id=playlist_id, tracks=uris)\n",
        "\n",
        "    # Store the playlist ID for later reference\n",
        "    playlist_collection[playlist_name] = playlist_id\n",
        "\n",
        "    print(f\"Playlist '{playlist_name}' created successfully with {len(uris)} tracks!\")\n",
        "\n",
        "# Save playlist collection to a file for future use\n",
        "with open(\"playlists.pkl\", \"wb\") as f:\n",
        "    pickle.dump(playlist_collection, f)\n",
        "\n",
        "print(\"\\nAll playlists have been created successfully! Playlist information saved in 'playlists.pkl'.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "ZCv2-5y9iIVG",
        "outputId": "c75f9d1b-034f-40ff-fde7-09007565c5a8"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-54-2f50af5c0393>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;31m# Create a playlist on Spotify\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     playlist_id = spotifyObject.user_playlist_create(user=username,\n\u001b[0m\u001b[1;32m     12\u001b[0m                                                      \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplaylist_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m                                                      \u001b[0mpublic\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36muser_playlist_create\u001b[0;34m(self, user, name, public, collaborative, description)\u001b[0m\n\u001b[1;32m    831\u001b[0m         }\n\u001b[1;32m    832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_post\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"users/{user}/playlists\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpayload\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m     def user_playlist_change_details(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_post\u001b[0;34m(self, url, args, payload, **kwargs)\u001b[0m\n\u001b[1;32m    330\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    331\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 332\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_internal_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"POST\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpayload\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    333\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_delete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpayload\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_internal_call\u001b[0;34m(self, method, url, payload, params)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"http\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m             \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprefix\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m         \u001b[0mheaders\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_auth_headers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m\"content_type\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"params\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/client.py\u001b[0m in \u001b[0;36m_auth_headers\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    240\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m             \u001b[0mtoken\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_access_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mas_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m             \u001b[0mtoken\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauth_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_access_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36mget_access_token\u001b[0;34m(self, code, as_dict, check_cache)\u001b[0m\n\u001b[1;32m    523\u001b[0m         payload = {\n\u001b[1;32m    524\u001b[0m             \u001b[0;34m\"redirect_uri\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mredirect_uri\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 525\u001b[0;31m             \u001b[0;34m\"code\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_auth_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    526\u001b[0m             \u001b[0;34m\"grant_type\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"authorization_code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m         }\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36mget_auth_response\u001b[0;34m(self, open_browser)\u001b[0m\n\u001b[1;32m    487\u001b[0m                                redirect_host, redirect_host)\n\u001b[1;32m    488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 489\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_auth_response_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen_browser\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mopen_browser\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    490\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_authorization_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36m_get_auth_response_interactive\u001b[0;34m(self, open_browser)\u001b[0m\n\u001b[1;32m    438\u001b[0m                 \u001b[0;34m\"Enter the URL you were redirected to: \"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m             )\n\u001b[0;32m--> 440\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_user_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    441\u001b[0m         \u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSpotifyOAuth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparse_auth_response_url\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/spotipy/oauth2.py\u001b[0m in \u001b[0;36m_get_user_input\u001b[0;34m(prompt)\u001b[0m\n\u001b[1;32m    108\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mraw_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    109\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mNameError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 110\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mstaticmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}